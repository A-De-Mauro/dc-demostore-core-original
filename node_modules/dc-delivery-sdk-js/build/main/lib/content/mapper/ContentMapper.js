"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentMapper = void 0;
var JsonWalker_1 = require("../../utils/JsonWalker");
var FragmentMeta_1 = require("../model/FragmentMeta");
var ContentMeta_1 = require("../model/ContentMeta");
var Image_1 = require("../../media/Image");
var Video_1 = require("../../media/Video");
var ContentReference_1 = require("../model/ContentReference");
/**
 * @hidden
 * ContentMapper provides functionality to convert simple JSON content into hydrated model classes
 * with helper functions. If a mapper is not defined for a schema it will remain as plain JSON.
 */
var ContentMapper = /** @class */ (function () {
    function ContentMapper(config) {
        this.config = config;
        this.mappers = [];
        this.registerBuiltInMappers();
    }
    /**
     * Registers a custom model / fn to hydrate a specific schema
     * @param schema JSON schema ID or Regex that matches against the JSON schema ID
     * @param fn Model Class or Function that can convert the schema
     */
    ContentMapper.prototype.addSchema = function (schema, fn) {
        if (typeof schema === 'string') {
            this.addCustomMapper(function (fragment) {
                if (fragment._meta.schema === schema) {
                    return fn(fragment);
                }
            });
        }
        else {
            this.addCustomMapper(function (fragment) {
                if (schema.test(fragment._meta.schema)) {
                    return fn(fragment);
                }
            });
        }
    };
    /**
     * Registers a custom function to hydrate content fragments
     * @param fn Mapper function
     */
    ContentMapper.prototype.addCustomMapper = function (fn) {
        this.mappers.push(fn);
    };
    /**
     * Converts the provided content into hydrated model classes
     * @param content Content to convert
     */
    ContentMapper.prototype.toMappedContent = function (content) {
        var _this = this;
        return JsonWalker_1.walkAndReplace(content, {
            afterWalk: function (node) {
                if (FragmentMeta_1.FragmentMeta.isFragment(node)) {
                    return _this.mapFragment(node);
                }
                return node;
            },
        });
    };
    /**
     * Converts a single fragment using the registered mappers
     * @param fragment Fragment to convert
     */
    ContentMapper.prototype.mapFragment = function (fragment) {
        for (var _i = 0, _a = this.mappers; _i < _a.length; _i++) {
            var mapper = _a[_i];
            var result = mapper(fragment);
            if (result) {
                return result;
            }
        }
        return fragment;
    };
    /**
     * Registers built in mappers
     */
    ContentMapper.prototype.registerBuiltInMappers = function () {
        this.addCustomMapper(this.convertContentReference.bind(this));
        this.addCustomMapper(this.convertContentMeta.bind(this));
        this.addCustomMapper(this.convertImage.bind(this));
        this.addCustomMapper(this.convertVideo.bind(this));
    };
    /**
     * Converts _meta inside Content Items into a ContentMeta instance
     * @param fragment
     */
    ContentMapper.prototype.convertContentMeta = function (fragment) {
        if (ContentMeta_1.ContentMeta.isContentBody(fragment)) {
            return __assign(__assign({}, fragment), { _meta: new ContentMeta_1.ContentMeta(fragment._meta) });
        }
    };
    /**
     * Converts content-link into an Content reference class instance
     * @param fragment
     */
    ContentMapper.prototype.convertContentReference = function (fragment) {
        if (ContentReference_1.ContentReference.isContentReference(fragment)) {
            var result = new ContentReference_1.ContentReference(fragment);
            return result;
        }
    };
    /**
     * Converts image-link into an Image class instance
     * @param fragment
     */
    ContentMapper.prototype.convertImage = function (fragment) {
        if (Image_1.Image.isImage(fragment)) {
            var result = new Image_1.Image(fragment, this.config);
            return result;
        }
    };
    /**
     * Converts image-link into an Image class instance
     * @param fragment
     */
    ContentMapper.prototype.convertVideo = function (fragment) {
        if (Video_1.Video.isVideo(fragment)) {
            var result = new Video_1.Video(fragment, this.config);
            return result;
        }
    };
    return ContentMapper;
}());
exports.ContentMapper = ContentMapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGVudE1hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29udGVudC9tYXBwZXIvQ29udGVudE1hcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHFEQUF3RDtBQUN4RCxzREFBcUQ7QUFDckQsb0RBQW1EO0FBRW5ELDJDQUEwQztBQUMxQywyQ0FBMEM7QUFDMUMsOERBQTZEO0FBVTdEOzs7O0dBSUc7QUFDSDtJQUdFLHVCQUE2QixNQUFpQztRQUFqQyxXQUFNLEdBQU4sTUFBTSxDQUEyQjtRQUZwRCxZQUFPLEdBQXNCLEVBQUUsQ0FBQztRQUd4QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGlDQUFTLEdBQVQsVUFBVSxNQUF1QixFQUFFLEVBQW1CO1FBQ3BELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzlCLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBQyxRQUFRO2dCQUM1QixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtvQkFDcEMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3JCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFDLFFBQVE7Z0JBQzVCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN0QyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDckI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILHVDQUFlLEdBQWYsVUFBZ0IsRUFBbUI7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIs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