"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContentClientV2Fresh = exports.getRetryConfig = void 0;
var axios_retry_1 = __importDefault(require("axios-retry"));
var createBaseContentClient_1 = require("./createBaseContentClient");
var isThrottled = function (error) { var _a; return ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) === 429; };
var DEFAULT_RETRY_CONFIG = {
    retries: 3,
    retryDelay: axios_retry_1.default.exponentialDelay,
    retryCondition: isThrottled,
};
/**
 * Get retry config to be passed to axios-retry
 * @param retryConfig
 * @hidden
 */
function getRetryConfig(retryConfig) {
    var _a, _b, _c;
    return {
        retries: (_a = retryConfig === null || retryConfig === void 0 ? void 0 : retryConfig.retries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_CONFIG.retries,
        retryDelay: (_b = retryConfig === null || retryConfig === void 0 ? void 0 : retryConfig.retryDelay) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_CONFIG.retryDelay,
        retryCondition: (_c = retryConfig === null || retryConfig === void 0 ? void 0 : retryConfig.retryCondition) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_CONFIG.retryCondition,
    };
}
exports.getRetryConfig = getRetryConfig;
/**
 * Create network client to make requests to the Fresh API service
 * @param config
 * @hidden
 */
function createContentClientV2Fresh(config, defaultHost) {
    var client = createBaseContentClient_1.createBaseContentClient(config, defaultHost);
    client.defaults.headers.common['X-API-Key'] = config.apiKey;
    axios_retry_1.default(client, getRetryConfig(config.retryConfig));
    return client;
}
exports.createContentClientV2Fresh = createContentClientV2Fresh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQ29udGVudENsaWVudFYyRnJlc2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NsaWVudC9jcmVhdGVDb250ZW50Q2xpZW50VjJGcmVzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0REFBcUM7QUFNckMscUVBQW9FO0FBRXBFLElBQU0sV0FBVyxHQUFHLFVBQUMsS0FBSyxZQUFLLE9BQUEsT0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsUUFBUSwwQ0FBRSxNQUFNLE1BQUssR0FBRyxDQUFBLEVBQUEsQ0FBQztBQUMvRCxJQUFNLG9CQUFvQixHQUE2QjtJQUNyRCxPQUFPLEVBQUUsQ0FBQztJQUNWLFVBQVUsRUFBRSxxQkFBVSxDQUFDLGdCQUFnQjtJQUN2QyxjQUFjLEVBQUUsV0FBVztDQUM1QixDQUFDO0FBRUY7Ozs7R0FJRztBQUNILFNBQWdCLGNBQWMsQ0FDNUIsV0FBc0M7O0lBRXRDLE9BQU87UUFDTCxPQUFPLFFBQUUsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLE9BQU8sbUNBQUksb0JBQW9CLENBQUMsT0FBTztRQUM3RCxVQUFVLFFBQUUsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLFVBQVUsbUNBQUksb0JBQW9CLENBQUMsVUFBVTtRQUN0RSxjQUFjLFFBQ1osV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLGNBQWMsbUNBQUksb0JBQW9CLENBQUMsY0FBYztLQUNyRSxDQUFDO0FBQ0osQ0FBQztBQVRELHdDQVNDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLDBCQUEwQixDQUN4QyxNQUFrQyxFQUNsQyxXQUFtQjtJQUVuQixJQUFNLE1BQU0sR0FBRyxpREFBdUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDNUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDNUQscUJBQVUsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFSRCxnRUFRQyJ9