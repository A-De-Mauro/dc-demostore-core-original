import Axios from 'axios';
import { encodeQueryString } from '../utils/Url';
/**
 * Default StagingEnvironmentFactoryConfig values
 */
const DefaultStagingEnvironmentFactoryConfig = {
    baseUrl: 'https://virtual-staging.amplience.net',
};
/**
 * Amplience [Virtual Staging Environment](https://docs.amplience.net/virtualstaging/virtualstagingintro.html?h=vse) factory.
 *
 * This factory is intended to be used by end user applications to preview content for a given snapshotID or at a given timestamp.
 *
 * It works by passing the virtual staging environment domain and the snapshotID or timestamp to the virtual-staging API,
 * which will return a new domain that can be used in the ContentClient.
 *
 * Example:
 *
 * ```typescript
 * const factory = new StagingEnvironmentFactory('11122222gggg232gg32g32g.staging.bigcontent.io');
 * const stagingEnvironmentWithSnapshot = await factory.generateDomain({snapshotId: 'abcdef123456'});
 *
 * const client = new ContentClient({
 *   account: 'test',
 *   stagingEnvironment: stagingEnvironmentWithSnapshot
 * });
 *
 * ```
 *
 * You may override other settings when constructing the client but if no additional configuration is provided sensible defaults will be used.
 */
export class StagingEnvironmentFactory {
    /**
     * Creates a StagingEnvironmentFactory instance.
     * @param string stagingEnvironment
     * @param config Client configuration options
     */
    constructor(stagingEnvironment, config = {}) {
        this.stagingEnvironment = stagingEnvironment;
        this.client = this.createClient({
            ...DefaultStagingEnvironmentFactoryConfig,
            ...config,
        });
    }
    /**
     * Generates a new staging environment domain name using the snapshotId and/or timestamp thats supplied in the options argument
     * @param options
     */
    async generateDomain(options) {
        try {
            const url = this.buildUrl(options);
            const response = await this.client.get(url);
            return response.data;
        }
        catch (err) {
            throw new Error(`An error occurred whilst attempting to generate a staging environment domain using options '${JSON.stringify(options)}': ${err.message}`);
        }
    }
    /**
     * Build the URL to invoke using the supplied GenerateDomainOptions
     * @param options GenerateDomainOptions
     */
    buildUrl(options) {
        const queryParameters = Object.entries(options).map(([key, value]) => [
            key,
            value.toString(),
        ]);
        const queryString = encodeQueryString(queryParameters);
        return `/domain/${this.stagingEnvironment}?${queryString}`;
    }
    /**
     * Create network client to make requests to the vse service
     * @param config
     */
    createClient(config) {
        const client = Axios.create({
            adapter: config.adaptor,
        });
        client.defaults.baseURL = config.baseUrl;
        return client;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhZ2luZ0Vudmlyb25tZW50RmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvc3RhZ2luZy1lbnZpcm9ubWVudC9TdGFnaW5nRW52aXJvbm1lbnRGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBd0IsTUFBTSxPQUFPLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBSWpEOztHQUVHO0FBQ0gsTUFBTSxzQ0FBc0MsR0FBb0M7SUFDOUUsT0FBTyxFQUFFLHVDQUF1QztDQUNqRCxDQUFDO0FBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLE9BQU8seUJBQXlCO0lBR3BDOzs7O09BSUc7SUFDSCxZQUNtQixrQkFBMEIsRUFDM0MsU0FBMEMsRUFBRTtRQUQzQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFHM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQzlCLEdBQUcsc0NBQXNDO1lBQ3pDLEdBQUcsTUFBTTtTQUNWLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQThCO1FBQ2pELElBQUk7WUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25DLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQVMsR0FBRyxDQUFDLENBQUM7WUFDcEQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQ3RCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUNiLCtGQUErRixJQUFJLENBQUMsU0FBUyxDQUMzRyxPQUFPLENBQ1IsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQ3JCLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDTyxRQUFRLENBQUMsT0FBOEI7UUFDL0MsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDcEUsR0FBRztZQUNILEtBQUssQ0FBQyxRQUFRLEVBQUU7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdkQsT0FBTyxXQUFXLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ08sWUFBWSxDQUNwQixNQUF1QztRQUV2QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzFCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztTQUN4QixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3pDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiJ9