/**
 * Utility which helps construct URLs to image resources hosted using the Amplience Dynamic Media platform.
 *
 * Commonly used transformations can chained together by calling the appropriate function on the builder.
 * Advanced transformations can be used by configuring a transformation template within the Amplience
 * back-office and applying the template to the builder.
 */
export class ImageUrlBuilder {
    constructor(media) {
        this.media = media;
        this._protocol = 'https';
        this._query = [];
    }
    /**
     * Protocol configures what protocol style to use when building the image URL.
     *
     * ```{{protocol}}[:]//images.site.com/i/account/image```
     * @param value URL protocol, valid values are: http, https and // for protocol relative URLs
     */
    protocol(value) {
        this._protocol = value;
        return this;
    }
    /**
     * Host configures the hostname to use when building the image URL.
     * By default, the SDK will use the most appropriate hostname based on
     * the SDK configuration.
     *
     * ```https://{{host}}/i/account/image```
     * @param value Hostname to use instead of the default value.
     */
    host(value) {
        this._host = value;
        return this;
    }
    /**
     * Format converts the image to the file format specified.
     * The format will be appended to the URL as a file extension.
     *
     * ```https://images.site.com/i/account/image.webp```
     * @param value  Images format to use when encoding the output.
     */
    format(value) {
        this._format = value;
        return this;
    }
    /**
     * SEO filename allows a custom filename to be used to improve SEO.
     *
     * ```https://images.site.com/i/account/image/{{seoFileName}}```
     * @param value
     */
    seoFileName(value) {
        this._seoFileName = value;
        return this;
    }
    /**
     * Template applies a transformation template to the image, which will
     * apply all of the transformation parameters contained in the template to the image.
     *
     * ```https://images.site.com/i/account/image?${{name}}$```
     * @param name The name of the transformation template previously configured in the Amplience back-office.
     */
    template(name) {
        this._query.push(`$${encodeURIComponent(name)}$`);
        return this;
    }
    /**
     * Parameter appends the specified parameter to the query string. This can be used to
     * pass variables into templates.
     *
     * ```https://images.site.com/i/account/image?{{name}}={{value}}```
     * @param name
     * @param value
     */
    parameter(name, value) {
        this._query.push(`${encodeURIComponent(name)}=${encodeURIComponent(value)}`);
        return this;
    }
    /**
     * Quality sets the compression level for the image output
     *
     * ```https://images.site.com/i/account/image?qlt={{value}}```
     * @param value The quality percentage (0-100)
     */
    quality(value) {
        this._query.push(`qlt=${value}`);
        return this;
    }
    /**
     * Sharpen applies an unsharp mask to the image to refine edges or make an image look more crisp.
     *
     * ```https://images.site.com/i/account/image?unsharp={{radius}},{{sigma}},{{amount}},{{threshold}}```
     *
     * @param radius The radius of the Gaussian, in pixels, not counting the center pixel.
     * @param sigma The standard deviation of the Gaussian, in pixels.
     * @param amount The percentage of the difference between the original and the blur image that is added back into the original.
     * @param threshold The threshold, as a fraction of MaxRGB, needed to apply the difference amount.
     */
    sharpen(radius = 0, sigma = 1, amount = 1, threshold = 0.05) {
        this._query.push(`unsharp=${radius},${sigma},${amount},${threshold}`);
        return this;
    }
    /**
     * Width resizes an image to the pixel size provided. If you only provide one axis,
     * the other will be calculated to maintain aspect ratio. Use the scale mode parameter
     * to apply different resize effects like stretch or crop.
     *
     * ```https://images.site.com/i/account/image?w={{value}}```
     * @param value The new width in pixels.
     */
    width(value) {
        this._query.push(`w=${value}`);
        return this;
    }
    /**
     * Height resizes an image to the pixel size provided. If you only provide one axis,
     * the other will be calculated to maintain aspect ratio. Use the scale mode parameter
     * to apply different resize effects like stretch or crop.
     *
     * ```https://images.site.com/i/account/image?h={{value}}```
     * @param value The new height in pixels.
     */
    height(value) {
        this._query.push(`h=${value}`);
        return this;
    }
    /**
     * Returns the fully constructed URL for this image with any transformations.
     */
    build() {
        const isSecure = this._protocol === '//' || this._protocol === 'https';
        const isVideo = this.media._meta &&
            this.media._meta.schema ===
                'http://bigcontent.io/cms/schema/v1/core#/definitions/video-link';
        let url = this._protocol === '//' ? '//' : `${this._protocol}://`;
        const host = this._host ? this._host : this.media.getHost(isSecure);
        url += host;
        url += `/${isVideo ? 'v' : 'i'}/`;
        url += encodeURIComponent(this.media.endpoint);
        url += '/';
        url += encodeURIComponent(this.media.name);
        if (this._seoFileName) {
            url += '/';
            url += encodeURIComponent(this._seoFileName);
        }
        if (this._format) {
            url += `.${this._format}`;
        }
        if (this._query.length > 0) {
            url += '?';
            url += this._query.join('&');
        }
        return url;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VVcmxCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9tZWRpYS9JbWFnZVVybEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFPMUIsWUFBNkIsS0FBWTtRQUFaLFVBQUssR0FBTCxLQUFLLENBQU87UUFOakMsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUlYLFdBQU0sR0FBYSxFQUFFLENBQUM7SUFFSyxDQUFDO0lBRTdDOzs7OztPQUtHO0lBQ0gsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQUksQ0FBQyxLQUFhO1FBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxLQUFrQjtRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILFFBQVEsQ0FBQyxJQUFZO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxTQUFTLENBQUMsSUFBWSxFQUFFLEtBQWE7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FB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