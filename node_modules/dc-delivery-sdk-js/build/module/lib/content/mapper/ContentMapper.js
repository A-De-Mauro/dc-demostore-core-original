import { walkAndReplace } from '../../utils/JsonWalker';
import { FragmentMeta } from '../model/FragmentMeta';
import { ContentMeta } from '../model/ContentMeta';
import { Image } from '../../media/Image';
import { Video } from '../../media/Video';
import { ContentReference } from '../model/ContentReference';
/**
 * @hidden
 * ContentMapper provides functionality to convert simple JSON content into hydrated model classes
 * with helper functions. If a mapper is not defined for a schema it will remain as plain JSON.
 */
export class ContentMapper {
    constructor(config) {
        this.config = config;
        this.mappers = [];
        this.registerBuiltInMappers();
    }
    /**
     * Registers a custom model / fn to hydrate a specific schema
     * @param schema JSON schema ID or Regex that matches against the JSON schema ID
     * @param fn Model Class or Function that can convert the schema
     */
    addSchema(schema, fn) {
        if (typeof schema === 'string') {
            this.addCustomMapper((fragment) => {
                if (fragment._meta.schema === schema) {
                    return fn(fragment);
                }
            });
        }
        else {
            this.addCustomMapper((fragment) => {
                if (schema.test(fragment._meta.schema)) {
                    return fn(fragment);
                }
            });
        }
    }
    /**
     * Registers a custom function to hydrate content fragments
     * @param fn Mapper function
     */
    addCustomMapper(fn) {
        this.mappers.push(fn);
    }
    /**
     * Converts the provided content into hydrated model classes
     * @param content Content to convert
     */
    toMappedContent(content) {
        return walkAndReplace(content, {
            afterWalk: (node) => {
                if (FragmentMeta.isFragment(node)) {
                    return this.mapFragment(node);
                }
                return node;
            },
        });
    }
    /**
     * Converts a single fragment using the registered mappers
     * @param fragment Fragment to convert
     */
    mapFragment(fragment) {
        for (const mapper of this.mappers) {
            const result = mapper(fragment);
            if (result) {
                return result;
            }
        }
        return fragment;
    }
    /**
     * Registers built in mappers
     */
    registerBuiltInMappers() {
        this.addCustomMapper(this.convertContentReference.bind(this));
        this.addCustomMapper(this.convertContentMeta.bind(this));
        this.addCustomMapper(this.convertImage.bind(this));
        this.addCustomMapper(this.convertVideo.bind(this));
    }
    /**
     * Converts _meta inside Content Items into a ContentMeta instance
     * @param fragment
     */
    convertContentMeta(fragment) {
        if (ContentMeta.isContentBody(fragment)) {
            return {
                ...fragment,
                _meta: new ContentMeta(fragment._meta),
            };
        }
    }
    /**
     * Converts content-link into an Content reference class instance
     * @param fragment
     */
    convertContentReference(fragment) {
        if (ContentReference.isContentReference(fragment)) {
            const result = new ContentReference(fragment);
            return result;
        }
    }
    /**
     * Converts image-link into an Image class instance
     * @param fragment
     */
    convertImage(fragment) {
        if (Image.isImage(fragment)) {
            const result = new Image(fragment, this.config);
            return result;
        }
    }
    /**
     * Converts image-link into an Image class instance
     * @param fragment
     */
    convertVideo(fragment) {
        if (Video.isVideo(fragment)) {
            const result = new Video(fragment, this.config);
            return result;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGVudE1hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29udGVudC9tYXBwZXIvQ29udGVudE1hcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBVTdEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQUd4QixZQUE2QixNQUFpQztRQUFqQyxXQUFNLEdBQU4sTUFBTSxDQUEyQjtRQUZwRCxZQUFPLEdBQXNCLEVBQUUsQ0FBQztRQUd4QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFNBQVMsQ0FBQyxNQUF1QixFQUFFLEVBQW1CO1FBQ3BELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzlCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7b0JBQ3BDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNyQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFL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