import { encodeQueryString } from '../../utils/Url';
import { walkAndReplace } from '../../utils/JsonWalker';
import { ContentItem } from '../model/ContentItem';
import { ContentNotFoundError } from '../model/ContentNotFoundError';
import { HttpError } from '../model/HttpError';
/**
 * @hidden
 */
const LD_ID = '@id';
/**
 * @hidden
 */
const LD_TYPE = '@type';
/**
 * @hidden
 */
const LD_GRAPH = '@graph';
/**
 * @hidden
 */
export class GetContentItemV1Impl {
    constructor(config, contentClient, mapper) {
        this.config = config;
        this.contentClient = contentClient;
        this.mapper = mapper;
    }
    /**
     * @deprecated use getContentItemById
     */
    getContentItem(id) {
        return this.getContentItemById(id);
    }
    async getContentItemById(id) {
        const url = this.getUrl({
            'sys.iri': `http://content.cms.amplience.com/${id}`,
        });
        try {
            const response = await this.contentClient.get(url);
            const contentItems = this.processResponse(response.data);
            if (contentItems.length === 0) {
                throw new ContentNotFoundError(id);
            }
            const item = contentItems.find((x) => x._meta.deliveryId === id);
            if (!item) {
                throw new ContentNotFoundError(id);
            }
            return this.hydrateContentItem(item);
        }
        catch (err) {
            if (err.response) {
                throw new HttpError(err.response.status, err.response.data);
            }
            throw err;
        }
    }
    getUrl(query) {
        const args = [
            ['query', JSON.stringify(query)],
            ['fullBodyObject', 'true'],
            ['scope', 'tree'],
            ['store', this.config.account],
        ];
        if (this.config.locale) {
            args.push(['locale', this.config.locale]);
        }
        const queryString = encodeQueryString(args);
        return `/cms/content/query?${queryString}`;
    }
    /**
     * Convert plain content JSON into ContentItem instamce
     * @param content
     */
    hydrateContentItem(content) {
        const contentItem = new ContentItem();
        contentItem.body = this.mapper.toMappedContent(content);
        return contentItem;
    }
    /**
     * Pre-processes the response to create a single content item object
     * with all linked content items inlined.
     * @param data Response from content query API
     */
    processResponse(data) {
        if (!data.result || !data[LD_GRAPH] || !Array.isArray(data.result)) {
            return [];
        }
        else {
            const graph = data[LD_GRAPH];
            const graphChildrenById = {};
            graph.forEach((child) => (graphChildrenById[child[LD_ID]] = child));
            return data.result.map((result) => {
                result = graphChildrenById[result[LD_ID]];
                // inline linked items
                result = walkAndReplace(result, {
                    beforeWalk: (node) => {
                        if (typeof node === 'object' && node !== null) {
                            if (node[LD_ID]) {
                                node = graphChildrenById[node[LD_ID]];
                            }
                        }
                        return node;
                    },
                });
                // upgrade legacy content & remove json-ld
                result = walkAndReplace(result, {
                    beforeWalk: (node) => {
                        node = this.upgradeLegacyContent(node);
                        node = this.injectMetaData(node);
                        node = this.removeJsonLD(node);
                        return node;
                    },
                });
                return result;
            });
        }
    }
    /**
     * Content produced by older versions do not include _meta.schema.
     * This function inserts those values to normalize the output
     */
    upgradeLegacyContent(node) {
        if (!node) {
            return node;
        }
        const type = node[LD_TYPE];
        const id = node[LD_ID];
        const isImage = id && id.indexOf('http://image.cms.amplience.com/') === 0;
        const isVideo = id && id.indexOf('http://video.cms.amplience.com/') === 0;
        if (type || isImage || isVideo) {
            if (!node._meta) {
                node._meta = {};
            }
            if (type) {
                if (!node._meta.schema) {
                    node._meta.schema = type;
                }
                if (!node._meta.name && node._title) {
                    node._meta.name = node._title;
                }
            }
            else if (isImage) {
                node._meta.schema =
                    'http://bigcontent.io/cms/schema/v1/core#/definitions/image-link';
            }
            else if (isVideo) {
                node._meta.schema =
                    'http://bigcontent.io/cms/schema/v1/core#/definitions/video-link';
            }
        }
        return node;
    }
    /**
     * Injects additional meta data which is lost by removing
     * the JSON-LD properties
     */
    injectMetaData(node) {
        if (node) {
            const id = node[LD_ID];
            if (id) {
                if (id.indexOf('http://content.cms.amplience.com/') === 0) {
                    node._meta = node._meta || {};
                    node._meta.deliveryId = id.slice(33);
                }
                else if (id.indexOf('http://image.cms.amplience.com/') === 0 ||
                    id.indexOf('http://video.cms.amplience.com/') === 0) {
                    node.id = id.slice(31);
                }
            }
        }
        return node;
    }
    /**
     * JSON-LD keywords are just for delivery payload
     */
    removeJsonLD(node) {
        if (node) {
            delete node[LD_TYPE];
            delete node[LD_ID];
        }
        return node;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0Q29udGVudEl0ZW1WMUltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbnRlbnQvY29vcmRpbmF0b3JzL0dldENvbnRlbnRJdGVtVjFJbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRS9DOztHQUVHO0FBQ0gsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBRXBCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBRXhCOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBRTFCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQixZQUNtQixNQUE2QixFQUM3QixhQUE0QixFQUM1QixNQUFxQjtRQUZyQixXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQ3JDLENBQUM7SUFFSjs7T0FFRztJQUNILGNBQWMsQ0FBd0IsRUFBVTtRQUM5QyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsS0FBSyxDQUFDLGtCQUFrQixDQUN0QixFQUFVO1FBRVYsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN0QixTQUFTLEVBQUUsb0NBQW9DLEVBQUUsRUFBRTtTQUNwRCxDQUFDLENBQUM7UUFFSCxJQUFJ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