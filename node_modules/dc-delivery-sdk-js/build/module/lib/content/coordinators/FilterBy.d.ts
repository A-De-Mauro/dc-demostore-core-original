import { AxiosInstance } from 'axios';
import { ContentClientConfigV2 } from '../../config/ContentClientConfigV2';
import { FilterByResponse, IOrder, RequestOptions } from '../model/FilterBy';
export declare class FilterBy<Body = any> {
    private readonly config;
    private readonly contentClient;
    static SCHEMA_PATH: string;
    static PARENT_PATH: string;
    private requestConfig;
    private readonly filterByService;
    constructor(config: ContentClientConfigV2, contentClient: AxiosInstance);
    /**
     *  This function will help construct requests for filtering Content Items or Slots
     *
     * @param path - json path to the property you wish to filter by e.g `/_meta/schema`
     * @param value - value you want to return matches for
     *
     * @returns `FilterBy<Body>`
     */
    filterBy<T = any>(path: string, value: T): FilterBy<Body>;
    /**
     *
     *  equivalent to:
     *
     * ```ts
     *  client.filterBy('/_meta/schema', contentTypeUri)
     * ```
     *
     * @param contentTypeUri - Content Type Uri you want to filter
     *
     * @returns `FilterBy<Body>`
     */
    filterByContentType(value: string): FilterBy<Body>;
    /**
     * Fetch content by parent id
     *
     * equivalent to:
     *
     * ```ts
     *  client.filterBy('/_meta/hierarchy/parentId', id)
     * ```
     *
     * @param id - ID of a Hierarchy Content Item
     *
     * @returns `FilterBy<Body>`
     */
    filterByParentId(value: string): FilterBy<Body>;
    /**
     * Set sortable key based on schema [`trait:sortable`](https://amplience.com/docs/development/contentdelivery/filterandsort.html#sorttrait)
     *
     *
     * @param key - key you wish to sort by
     * @param order - order enum ASC, DESC
     *
     * @returns `FilterBy<Body>`
     */
    sortBy(key: string, order: IOrder): FilterBy<Body>;
    /**
     * Set page size and page cursor
     *
     * @param size - page size maximum  of 12
     * @param cursor - an encoded string that points to the next page
     */
    page(size: number, cursor?: string): FilterBy<Body>;
    /**
     * set page cursor
     *
     * @param cursor - an encoded string that points to the next page
     */
    page(cursor: string): FilterBy<Body>;
    /**
     *
     * @param parameters - api options for response format
     *
     * @returns `FilterBy<Body>`
     */
    request(parameters?: RequestOptions): Promise<FilterByResponse<Body>>;
}
