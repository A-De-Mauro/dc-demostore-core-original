import { FilterByImpl } from './FilterByImpl';
export class FilterBy {
    constructor(config, contentClient) {
        this.config = config;
        this.contentClient = contentClient;
        this.requestConfig = {
            filterBy: [],
        };
        this.filterByService = new FilterByImpl(this.config, this.contentClient);
    }
    /**
     *  This function will help construct requests for filtering Content Items or Slots
     *
     * @param path - json path to the property you wish to filter by e.g `/_meta/schema`
     * @param value - value you want to return matches for
     *
     * @returns `FilterBy<Body>`
     */
    filterBy(path, value) {
        this.requestConfig.filterBy.push({
            path,
            value,
        });
        return this;
    }
    /**
     *
     *  equivalent to:
     *
     * ```ts
     *  client.filterBy('/_meta/schema', contentTypeUri)
     * ```
     *
     * @param contentTypeUri - Content Type Uri you want to filter
     *
     * @returns `FilterBy<Body>`
     */
    filterByContentType(value) {
        return this.filterBy(FilterBy.SCHEMA_PATH, value);
    }
    /**
     * Fetch content by parent id
     *
     * equivalent to:
     *
     * ```ts
     *  client.filterBy('/_meta/hierarchy/parentId', id)
     * ```
     *
     * @param id - ID of a Hierarchy Content Item
     *
     * @returns `FilterBy<Body>`
     */
    filterByParentId(value) {
        return this.filterBy(FilterBy.PARENT_PATH, value);
    }
    /**
     * Set sortable key based on schema [`trait:sortable`](https://amplience.com/docs/development/contentdelivery/filterandsort.html#sorttrait)
     *
     *
     * @param key - key you wish to sort by
     * @param order - order enum ASC, DESC
     *
     * @returns `FilterBy<Body>`
     */
    sortBy(key, order) {
        this.requestConfig.sortBy = {
            key,
            order,
        };
        return this;
    }
    page(size, cursor) {
        if (!this.requestConfig.page) {
            this.requestConfig.page = {};
        }
        if (arguments.length === 1 && typeof size === 'string') {
            this.requestConfig.page.cursor = size;
            return this;
        }
        if (typeof size === 'number') {
            this.requestConfig.page.size = size;
        }
        if (cursor) {
            this.requestConfig.page.cursor = cursor;
        }
        return this;
    }
    /**
     *
     * @param parameters - api options for response format
     *
     * @returns `FilterBy<Body>`
     */
    async request(parameters) {
        if (parameters) {
            this.requestConfig.parameters = parameters;
        }
        return this.filterByService.fetch(this.requestConfig);
    }
}
FilterBy.SCHEMA_PATH = '/_meta/schema';
FilterBy.PARENT_PATH = '/_meta/hierarchy/parentId';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyQnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbnRlbnQvY29vcmRpbmF0b3JzL0ZpbHRlckJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxNQUFNLE9BQU8sUUFBUTtJQWFuQixZQUNtQixNQUE2QixFQUM3QixhQUE0QjtRQUQ1QixXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVh2QyxrQkFBYSxHQUFvQjtZQUN2QyxRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUM7UUFFZSxvQkFBZSxHQUF1QixJQUFJLFlBQVksQ0FDckUsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsYUFBYSxDQUNuQixDQUFDO0lBS0MsQ0FBQztJQUVKOzs7Ozs7O09BT0c7SUFDSCxRQUFRLENBQVUsSUFBWSxFQUFFLEtBQVE7UUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQy9CLElBQUk7WUFDSixLQUFLO1NBQ04sQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxtQkFBbUIsQ0FBQyxLQUFhO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBUyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBUyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILE1BQU0sQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUMvQixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRztZQUMxQixHQUFHO1lBQ0gsS0FBSztTQUNOLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFnQkQsSUFBSSxDQUFDLElBQXFCLEVBQUUsTUFBZTtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDdEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUV0QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNyQztRQUVELElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN6QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUEyQjtRQUN2QyxJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUM1QztRQUVELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7O0FBcklNLG9CQUFXLEdBQUcsZUFBZSxDQUFDO0FBQzlCLG9CQUFXLEdBQUcsMkJBQTJCLENBQUMifQ==