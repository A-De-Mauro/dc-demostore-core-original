import { HttpError } from '../model/HttpError';
/**
 * Utility that maps an array of ids or keys into the expected format of a `content/fetch` request body
 * @param property id or key
 * @param values array of ids or keys
 * @hidden
 */
function mapToRequests(property, values) {
    if (!Array.isArray(values)) {
        throw new TypeError('Expecting an array');
    }
    return values.map((value) => ({ [property]: String(value) }));
}
/**
 * Wraps `content/fetch`
 * @hidden
 */
export class GetContentItemsV2Impl {
    constructor(config, contentClient) {
        this.config = config;
        this.contentClient = contentClient;
    }
    async getContentItemsByKey(keys) {
        return this.getContentItems(mapToRequests('key', keys));
    }
    async getContentItemsById(ids) {
        return this.getContentItems(mapToRequests('id', ids));
    }
    async getContentItems(requests, parameters) {
        return this.fetchContentItems({
            parameters,
            requests,
        });
    }
    async fetchContentItems({ requests, parameters, }) {
        const defaultParameters = {
            depth: 'all',
            format: 'inlined',
        };
        if (this.config.locale) {
            defaultParameters.locale = this.config.locale;
        }
        const mergedParameters = {
            ...defaultParameters,
            ...(parameters || {}),
        };
        try {
            const { data } = await this.contentClient.post('content/fetch', {
                parameters: mergedParameters,
                requests,
            });
            return data;
        }
        catch (err) {
            if (err.response) {
                throw new HttpError(err.response.status, err.response.data);
            }
            throw err;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0Q29udGVudEl0ZW1zVjJJbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb250ZW50L2Nvb3JkaW5hdG9ycy9HZXRDb250ZW50SXRlbXNWMkltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTS9DOzs7OztHQUtHO0FBQ0gsU0FBUyxhQUFhLENBQ3BCLFFBQTBCLEVBQzFCLE1BQWtCO0lBRWxCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzFCLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztLQUMzQztJQUNELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FDZixDQUFDLEtBQVUsRUFBRSxFQUFFLENBQ2IsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUF1QyxDQUFBLENBQ3RFLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQyxZQUNtQixNQUE2QixFQUM3QixhQUE0QjtRQUQ1QixXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUM1QyxDQUFDO0lBRUosS0FBSyxDQUFDLG9CQUFvQixDQUN4QixJQUFtQjtRQUVuQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxLQUFLLENBQUMsbUJBQW1CLENBQ3ZCLEdBQWtCO1FBRWxCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQ25CLFFBQWtDLEVBQ2xDLFVBQXVDO1FBRXZDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQzVCLFVBQVU7WUFDVixRQUFRO1NBQ1QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxpQkFBaUIsQ0FBTyxFQUM1QixRQUFRLEVBQ1IsVUFBVSxHQUNHO1FBQ2IsTUFBTSxpQkFBaUIsR0FBK0I7WUFDcEQsS0FBSyxFQUFFLEtBQUs7WUFDWixNQUFNLEVBQUUsU0FBUztTQUNsQixDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUN0QixpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDL0M7UUFFRCxNQUFNLGdCQUFnQixHQUFHO1lBQ3ZCLEdBQUcsaUJBQWlCO1lBQ3BCLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQ3RCLENBQUM7UUFFRixJQUFJO1lBQ0YsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUM5RCxVQUFVLEVBQUUsZ0JBQWdCO2dCQUM1QixRQUFRO2FBQ1QsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO2dCQUNoQixNQUFNLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0Q7WUFDRCxNQUFNLEdBQUcsQ0FBQztTQUNYO0lBQ0gsQ0FBQztDQUNGIn0=