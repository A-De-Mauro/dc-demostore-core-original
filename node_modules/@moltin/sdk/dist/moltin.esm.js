import fetch$1, { Headers, Request, Response } from 'node-fetch';
import Cookies from 'js-cookie';
import { pluralize, underscore, singularize, dasherize } from 'inflected';
import FormData$1 from 'form-data';
import 'es6-promise';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

if (!globalThis.fetch) {
  globalThis.fetch = fetch$1;
  globalThis.Headers = Headers;
  globalThis.Request = Request;
  globalThis.Response = Response;
}

var version = "0.0.0-semantic-release";

var LocalStorageFactory =
/*#__PURE__*/
function () {
  function LocalStorageFactory() {
    _classCallCheck(this, LocalStorageFactory);

    if (typeof localStorage === 'undefined' || localStorage === null) {
      var _require = require('node-localstorage'),
          LocalStorage = _require.LocalStorage;

      this.localStorage = new LocalStorage('./localStorage');
    } else {
      this.localStorage = window.localStorage;
    }
  }

  _createClass(LocalStorageFactory, [{
    key: "set",
    value: function set(key, value) {
      return this.localStorage.setItem(key, value);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.localStorage.getItem(key);
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      return this.localStorage.removeItem(key);
    }
  }]);

  return LocalStorageFactory;
}();

var SecureCookiesStorageFactory =
/*#__PURE__*/
function () {
  function SecureCookiesStorageFactory() {
    _classCallCheck(this, SecureCookiesStorageFactory);

    this.cookies = Cookies;
  }

  _createClass(SecureCookiesStorageFactory, [{
    key: "set",
    value: function set(key, value) {
      return this.cookies.set(key, value, {
        secure: true,
        sameSite: 'strict'
      });
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.cookies.get(key);
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      return this.cookies.remove(key);
    }
  }]);

  return SecureCookiesStorageFactory;
}();

var Config = function Config(options) {
  _classCallCheck(this, Config);

  var application = options.application,
      client_id = options.client_id,
      client_secret = options.client_secret,
      currency = options.currency,
      language = options.language,
      host = options.host,
      storage = options.storage,
      storage_type = options.storage_type,
      custom_fetch = options.custom_fetch,
      custom_authenticator = options.custom_authenticator,
      headers = options.headers,
      disableCart = options.disableCart,
      reauth = options.reauth,
      protocol = options.protocol,
      store_id = options.store_id,
      retryDelay = options.retryDelay,
      retryJitter = options.retryJitter,
      fetchMaxAttempts = options.fetchMaxAttempts;
  this.application = application;
  this.client_id = client_id;
  this.client_secret = client_secret;
  this.store_id = store_id;
  this.host = host || 'api.moltin.com';
  this.protocol = protocol || 'https';
  this.version = 'v2';
  this.currency = currency;
  this.language = language;
  this.auth = {
    expires: 3600,
    uri: 'oauth/access_token',
    fetch: custom_fetch || fetch
  };
  this.sdk = {
    version: version,
    language: 'JS'
  };
  var defaultStorage = storage_type === 'cookies' ? new SecureCookiesStorageFactory() : new LocalStorageFactory();
  this.storage = storage || defaultStorage;
  this.custom_authenticator = custom_authenticator;
  this.headers = headers || {};
  this.disableCart = disableCart || false;
  this.reauth = reauth || true;
  this.retryDelay = retryDelay || 1000;
  this.retryJitter = retryJitter || 500;
  this.fetchMaxAttempts = fetchMaxAttempts !== undefined && fetchMaxAttempts !== null ? fetchMaxAttempts : 4;
};

function buildRelationshipData(type, ids) {
  var typeModifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : underscore;
  var data = [];
  if (ids === null || ids.length === 0) return data;

  if (typeof ids === 'string') {
    var obj = {
      type: typeModifier(type),
      id: ids
    };
    return [obj];
  }

  if (Array.isArray(ids)) {
    data = ids.map(function (item) {
      if (_typeof(item) === 'object' && item !== null) {
        return _objectSpread({
          type: typeModifier(type)
        }, item);
      }

      return {
        type: typeModifier(type),
        id: item
      };
    });
  }

  return data;
}
function formatUrlResource(type) {
  if (type === 'main-image') return type;
  return pluralize(type);
}
function createCartIdentifier() {
  return 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {
    return (Math.random() * 16 | 0).toString(16);
  });
}
function cartIdentifier(storage) {
  var cartId = createCartIdentifier();

  if (storage.get('mcart') !== null && storage.get('mcart') !== undefined) {
    return storage.get('mcart');
  }

  storage.set('mcart', cartId);
  return cartId;
}
function parseJSON(response) {
  return new Promise(function (resolve) {
    response.text().then(function (body) {
      resolve({
        status: response.status,
        ok: response.ok,
        json: body !== '' ? JSON.parse(body) : '{}'
      });
    });
  });
}

function formatFilterString(type, filter) {
  var filterStringArray = Object.keys(filter).map(function (key) {
    var value = filter[key];
    var queryString = "".concat(key, ",").concat(value);
    if (_typeof(value) === 'object') queryString = Object.keys(value).map(function (attr) {
      return "".concat(key, ".").concat(attr, ",").concat(value[attr]);
    });
    return "".concat(type, "(").concat(queryString, ")");
  });
  return filterStringArray.join(':');
}

function formatQueryString(key, value) {
  if (key === 'limit' || key === 'offset') {
    return "page".concat(value);
  }

  if (key === 'filter') {
    var filterValues = Object.keys(value).map(function (filter) {
      return formatFilterString(filter, value[filter]);
    });
    return "".concat(key, "=").concat(filterValues.join(':'));
  }

  return "".concat(key, "=").concat(value);
}

function buildQueryParams(_ref) {
  var includes = _ref.includes,
      sort = _ref.sort,
      limit = _ref.limit,
      offset = _ref.offset,
      filter = _ref.filter;
  var query = {};

  if (includes) {
    query.include = includes;
  }

  if (sort) {
    query.sort = "".concat(sort);
  }

  if (limit) {
    query.limit = "[limit]=".concat(limit);
  }

  if (offset) {
    query.offset = "[offset]=".concat(offset);
  }

  if (filter) {
    query.filter = filter;
  }

  return Object.keys(query).map(function (k) {
    return formatQueryString(k, query[k]);
  }).join('&');
}

function formatQueryParams(query) {
  return Object.keys(query).map(function (k) {
    return formatQueryString(k, query[k]);
  }).join('&');
}
function buildURL(endpoint, params) {
  if (params.includes || params.sort || params.limit || params.offset || params.filter) {
    var paramsString = buildQueryParams(params);
    return "".concat(endpoint, "?").concat(paramsString);
  }

  return endpoint;
}
function buildRequestBody(body) {
  var parsedBody;

  if (body) {
    if (body.options) {
      parsedBody = "{\n        \"data\": ".concat(JSON.stringify(body.data), ",\n        \"options\" : ").concat(JSON.stringify(body.options), "\n      }");
    } else {
      parsedBody = "{\n        \"data\": ".concat(JSON.stringify(body), "\n      }");
    }
  }

  return parsedBody;
}
function buildCartItemData(id) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cart_item';
  var flows = arguments.length > 3 ? arguments[3] : undefined;
  var isSku = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  var payload = _objectSpread({
    type: type
  }, flows);

  if (type === 'cart_item') {
    if (isSku) Object.assign(payload, {
      sku: id,
      quantity: parseInt(quantity, 10)
    });else Object.assign(payload, {
      id: id,
      quantity: parseInt(quantity, 10)
    });
  }

  if (type === 'promotion_item') {
    Object.assign(payload, {
      code: id
    });
  }

  return payload;
}
function buildCartCheckoutData(customer, billing_address, shipping_address) {
  var parsedCustomer = customer;
  if (typeof customer === 'string') parsedCustomer = {
    id: customer
  };
  return {
    customer: parsedCustomer,
    billing_address: billing_address,
    shipping_address: shipping_address
  };
}
function resetProps(instance) {
  var inst = instance;
  ['includes', 'sort', 'limit', 'offset', 'filter'].forEach(function (e) {
    return delete inst[e];
  });
}
function getCredentials(storage) {
  return JSON.parse(storage.get('moltinCredentials'));
}
function tokenInvalid(_ref2) {
  var storage = _ref2.storage,
      client_id = _ref2.client_id,
      reauth = _ref2.reauth;
  var credentials = getCredentials(storage);

  var handleInvalid = function handleInvalid(message) {
    var logger = reauth ? console.info : console.error;
    logger(message);
    return true;
  };

  if (!credentials) return handleInvalid('Token status: credentials do not exist');
  if (!credentials.access_token) return handleInvalid('Token status: credentials missing access_token');
  if (credentials.client_id !== client_id) return handleInvalid('Token status: client_id mismatch');
  if (Math.floor(Date.now() / 1000) >= credentials.expires) return handleInvalid('Token status: credentials expired');
  return false;
}
function isNode() {
  return typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
}

var createAuthRequest = function createAuthRequest(config) {
  if (!config.client_id) {
    throw new Error('You must have a client_id set');
  }

  if (!config.host) {
    throw new Error('You have not specified an API host');
  }

  var body = {
    grant_type: config.client_secret ? 'client_credentials' : 'implicit',
    client_id: config.client_id
  };

  if (config.client_secret) {
    body.client_secret = config.client_secret;
  }

  return new Promise(function (resolve, reject) {
    config.auth.fetch.bind()("".concat(config.protocol, "://").concat(config.host, "/").concat(config.auth.uri), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-MOLTIN-SDK-LANGUAGE': config.sdk.language,
        'X-MOLTIN-SDK-VERSION': config.sdk.version
      },
      body: Object.keys(body).map(function (k) {
        return "".concat(encodeURIComponent(k), "=").concat(encodeURIComponent(body[k]));
      }).join('&')
    }).then(parseJSON).then(function (response) {
      if (response.ok) {
        resolve(response.json);
      }

      reject(response.json);
    }).catch(function (error) {
      return reject(error);
    });
  });
};

var fetchRetry = function fetchRetry(config, uri, method, version, headers, requestBody) {
  var attempt = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;
  return new Promise(function (resolve, reject) {
    var ver = version || config.version || '';
    config.auth.fetch.bind()("".concat(config.protocol, "://").concat(config.host, "/").concat(ver, "/").concat(uri), {
      method: method.toUpperCase(),
      headers: headers,
      body: requestBody()
    }).then(parseJSON).then(function (response) {
      if (response.ok) {
        resolve(response.json);
      }

      if (attempt < config.fetchMaxAttempts && response.status === 429) {
        setTimeout(function () {
          return fetchRetry(config, uri, method, version, headers, requestBody, attempt + 1).then(function (result) {
            return resolve(result);
          }).catch(function (error) {
            return reject(error);
          });
        }, attempt * config.retryDelay + Math.floor(Math.random() * config.retryJitter));
      } else {
        reject(response.json);
      }
    }).catch(function (error) {
      return reject(error);
    });
  });
};

var RequestFactory =
/*#__PURE__*/
function () {
  function RequestFactory(config) {
    _classCallCheck(this, RequestFactory);

    this.config = config;
    this.storage = config.storage;
  }

  _createClass(RequestFactory, [{
    key: "authenticate",
    value: function authenticate() {
      var config = this.config,
          storage = this.storage;
      var promise = config.custom_authenticator ? config.custom_authenticator() : createAuthRequest(config);
      promise.then(function (_ref) {
        var access_token = _ref.access_token,
            refresh_token = _ref.refresh_token,
            expires = _ref.expires;

        if (access_token || refresh_token) {
          var credentials = _objectSpread({
            client_id: config.client_id,
            access_token: access_token,
            expires: expires
          }, refresh_token && {
            refresh_token: refresh_token
          });

          storage.set('moltinCredentials', JSON.stringify(credentials));
        }
      }).catch(function () {});
      return promise;
    }
  }, {
    key: "send",
    value: function send(uri, method) {
      var _this = this;

      var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var instance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
      var wrapBody = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var version = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
      var additionalHeaders = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : undefined;
      var config = this.config,
          storage = this.storage;
      var promise = new Promise(function (resolve, reject) {
        var credentials = getCredentials(storage);

        var req = function req(cred) {
          var access_token = cred ? cred.access_token : null;
          var isFormData = additionalHeaders && additionalHeaders['Content-Type'] && additionalHeaders['Content-Type'].includes('multipart') || !isNode() && body instanceof FormData;
          var headers = {
            'X-MOLTIN-SDK-LANGUAGE': config.sdk.language,
            'X-MOLTIN-SDK-VERSION': config.sdk.version
          };

          if (!isFormData) {
            headers['Content-Type'] = 'application/json';
          }

          if (access_token) {
            headers.Authorization = "Bearer ".concat(access_token);
          }

          if (config.store_id) {
            headers['X-MOLTIN-AUTH-STORE'] = config.store_id;
          }

          headers['X-MOLTIN-APPLICATION'] = config.application ? config.application : 'epcc sdk';

          if (config.currency) {
            headers['X-MOLTIN-CURRENCY'] = config.currency;
          }

          if (config.language) {
            headers['X-MOLTIN-LANGUAGE'] = config.language;
          }

          if (token) {
            headers['X-MOLTIN-CUSTOMER-TOKEN'] = token;
          }

          if (config.headers) {
            Object.assign(headers, config.headers);
          }

          if (additionalHeaders) {
            Object.assign(headers, additionalHeaders);
          }

          var requestBody = function requestBody() {
            // form-data body should be sent raw
            if (isFormData) return body;
            return wrapBody ? buildRequestBody(body) : JSON.stringify(body);
          };

          fetchRetry(config, uri, method, version, headers, requestBody).then(function (result) {
            return resolve(result);
          }).catch(function (error) {
            return reject(error);
          });
        };

        if (tokenInvalid(config) && config.reauth && !config.store_id) {
          return _this.authenticate().then(function () {
            return req(getCredentials(storage));
          }).catch(function (error) {
            return reject(error);
          });
        }

        return req(credentials);
      });
      if (instance) resetProps(instance);
      return promise;
    }
  }]);

  return RequestFactory;
}();

var BaseExtend =
/*#__PURE__*/
function () {
  function BaseExtend(config) {
    _classCallCheck(this, BaseExtend);

    this.request = new RequestFactory(config);
    this.config = config;
  }

  _createClass(BaseExtend, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL(this.endpoint, {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this);
      return this.call;
    }
  }, {
    key: "Get",
    value: function Get(id) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.call = this.request.send(buildURL("".concat(this.endpoint, "/").concat(id), {
        includes: this.includes
      }), 'GET', undefined, token, this);
      return this.call;
    }
  }, {
    key: "Filter",
    value: function Filter(filter) {
      this.filter = filter;
      return this;
    }
  }, {
    key: "Limit",
    value: function Limit(value) {
      this.limit = value;
      return this;
    }
  }, {
    key: "Offset",
    value: function Offset(value) {
      this.offset = value;
      return this;
    }
  }, {
    key: "Sort",
    value: function Sort(value) {
      this.sort = value;
      return this;
    }
  }, {
    key: "With",
    value: function With(includes) {
      if (includes) this.includes = includes.toString().toLowerCase();
      return this;
    }
  }, {
    key: "Attributes",
    value: function Attributes() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.request.send("".concat(this.endpoint, "/attributes"), 'GET', undefined, token);
    }
  }]);

  return BaseExtend;
}();

var CRUDExtend =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(CRUDExtend, _BaseExtend);

  function CRUDExtend() {
    _classCallCheck(this, CRUDExtend);

    return _possibleConstructorReturn(this, _getPrototypeOf(CRUDExtend).apply(this, arguments));
  }

  _createClass(CRUDExtend, [{
    key: "Create",
    value: function Create(body) {
      return this.request.send(this.endpoint, 'POST', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }));
    }
  }, {
    key: "Delete",
    value: function Delete(id) {
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'DELETE');
    }
  }, {
    key: "Update",
    value: function Update(id, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'PUT', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), token);
    }
  }]);

  return CRUDExtend;
}(BaseExtend);

var ProductsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(ProductsEndpoint, _CRUDExtend);

  function ProductsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, ProductsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProductsEndpoint).call(this, endpoint));
    _this.endpoint = 'products';
    return _this;
  }

  _createClass(ProductsEndpoint, [{
    key: "CreateRelationships",
    value: function CreateRelationships(id, type, resources) {
      var body = buildRelationshipData(type, resources);
      var parsedType = formatUrlResource(type);
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/relationships/").concat(parsedType), 'POST', type === 'main-image' ? body[0] : body);
    }
  }, {
    key: "DeleteRelationships",
    value: function DeleteRelationships(id, type, resources) {
      var body = buildRelationshipData(type, resources);
      var parsedType = formatUrlResource(type);
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/relationships/").concat(parsedType), 'DELETE', type === 'main-image' ? body[0] : body);
    }
  }, {
    key: "UpdateRelationships",
    value: function UpdateRelationships(id, type) {
      var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var body = buildRelationshipData(type, resources);
      var parsedType = formatUrlResource(type);
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/relationships/").concat(parsedType), 'PUT', type === 'main-image' ? body[0] : body);
    }
  }, {
    key: "BuildChildProducts",
    value: function BuildChildProducts(id) {
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/build"), 'POST');
    }
  }]);

  return ProductsEndpoint;
}(CRUDExtend);

var CurrenciesEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(CurrenciesEndpoint, _BaseExtend);

  function CurrenciesEndpoint(config) {
    var _this;

    _classCallCheck(this, CurrenciesEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrenciesEndpoint).call(this, config));
    _this.endpoint = 'currencies';
    _this.storage = config.storage;
    return _this;
  }

  _createClass(CurrenciesEndpoint, [{
    key: "Create",
    value: function Create(body) {
      return this.request.send("".concat(this.endpoint), 'POST', body);
    }
  }, {
    key: "Delete",
    value: function Delete(id) {
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'DELETE');
    }
  }, {
    key: "Update",
    value: function Update(id, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'PUT', body);
    }
  }, {
    key: "Set",
    value: function Set(currency) {
      var config = this.config,
          storage = this.storage;
      storage.set('mcurrency', currency);
      config.currency = currency;
      var promise = new Promise(function (resolve, reject) {
        var request = storage.get('mcurrency');

        try {
          resolve(request);
        } catch (err) {
          reject(new Error(err));
        }
      });
      return promise;
    }
  }, {
    key: "Active",
    value: function Active() {
      var storage = this.storage;
      var promise = new Promise(function (resolve, reject) {
        var request = storage.get('mcurrency');

        try {
          resolve(request);
        } catch (err) {
          reject(new Error(err));
        }
      });
      return promise;
    }
  }]);

  return CurrenciesEndpoint;
}(BaseExtend);

var BrandsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(BrandsEndpoint, _CRUDExtend);

  function BrandsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, BrandsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BrandsEndpoint).call(this, endpoint));
    _this.endpoint = 'brands';
    return _this;
  }

  return BrandsEndpoint;
}(CRUDExtend);

var CartEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(CartEndpoint, _BaseExtend);

  function CartEndpoint(request, id) {
    var _this;

    _classCallCheck(this, CartEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CartEndpoint).apply(this, arguments));
    _this.request = request;
    _this.cartId = id;
    _this.endpoint = 'carts';
    return _this;
  }

  _createClass(CartEndpoint, [{
    key: "Get",
    value: function Get() {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId), 'GET');
    }
  }, {
    key: "Items",
    value: function Items() {
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL("".concat(this.endpoint, "/").concat(this.cartId, "/items"), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET');
      return this.call;
    }
  }, {
    key: "AddProduct",
    value: function AddProduct(productId) {
      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var isSku = arguments.length > 3 ? arguments[3] : undefined;
      var body = buildCartItemData(productId, quantity, 'cart_item', {}, isSku);
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items"), 'POST', _objectSpread({}, body, data));
    }
  }, {
    key: "AddCustomItem",
    value: function AddCustomItem(body) {
      var itemObject = Object.assign(body, {
        type: 'custom_item'
      });
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items"), 'POST', itemObject);
    }
  }, {
    key: "AddPromotion",
    value: function AddPromotion(code) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var body = buildCartItemData(code, null, 'promotion_item');
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items"), 'POST', body, token);
    }
  }, {
    key: "BulkAdd",
    value: function BulkAdd(body) {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items"), 'POST', {
        data: body,
        options: {
          add_all_or_nothing: false
        }
      });
    }
  }, {
    key: "CreateCart",
    value: function CreateCart(cartData, token) {
      return this.request.send("".concat(this.endpoint), 'POST', cartData, token);
    }
  }, {
    key: "UpdateCart",
    value: function UpdateCart(cartData, token) {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId), 'PUT', cartData, token);
    }
  }, {
    key: "GetCartsList",
    value: function GetCartsList(token) {
      return this.request.send("".concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "AddCustomerAssociation",
    value: function AddCustomerAssociation(customerId, token) {
      var body = [{
        type: 'customer',
        id: customerId
      }];
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/relationships/customers"), 'POST', body, token);
    }
  }, {
    key: "RemoveItem",
    value: function RemoveItem(itemId) {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items/").concat(itemId), 'DELETE');
    }
  }, {
    key: "RemoveAllItems",
    value: function RemoveAllItems() {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items"), 'DELETE');
    }
  }, {
    key: "UpdateItem",
    value: function UpdateItem(itemId, quantity) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var body = buildCartItemData(itemId, quantity);
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items/").concat(itemId), 'PUT', _objectSpread({}, body, data));
    }
  }, {
    key: "UpdateItems",
    value: function UpdateItems(items) {
      var body = items.map(function (_ref) {
        var id = _ref.id,
            quantity = _ref.quantity,
            type = _ref.type,
            rest = _objectWithoutProperties(_ref, ["id", "quantity", "type"]);

        return buildCartItemData(id, quantity, type, rest);
      });
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items"), 'PUT', body);
    }
  }, {
    key: "UpdateItemQuantity",
    value: function UpdateItemQuantity(itemId, quantity) {
      var body = buildCartItemData(itemId, quantity);
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items/").concat(itemId), 'PUT', body);
    }
  }, {
    key: "AddItemTax",
    value: function AddItemTax(itemId, taxData) {
      var body = Object.assign(taxData, {
        type: 'tax_item'
      });
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items/").concat(itemId, "/taxes"), 'POST', body);
    }
  }, {
    key: "UpdateItemTax",
    value: function UpdateItemTax(itemId, taxItemId, taxData) {
      var body = Object.assign(taxData, {
        type: 'tax_item'
      });
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items/").concat(itemId, "/taxes/").concat(taxItemId), 'PUT', body);
    }
  }, {
    key: "RemoveItemTax",
    value: function RemoveItemTax(itemId, taxItemId) {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/items/").concat(itemId, "/taxes/").concat(taxItemId), 'DELETE');
    }
  }, {
    key: "Checkout",
    value: function Checkout(customer, billing_address) {
      var shipping_address = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : billing_address;
      var body = buildCartCheckoutData(customer, billing_address, shipping_address);
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId, "/checkout"), 'POST', body);
    }
  }, {
    key: "Delete",
    value: function Delete() {
      return this.request.send("".concat(this.endpoint, "/").concat(this.cartId), 'DELETE');
    }
  }]);

  return CartEndpoint;
}(BaseExtend);

var PCMFileRelationshipEndpoint =
/*#__PURE__*/
function () {
  function PCMFileRelationshipEndpoint(endpoint) {
    _classCallCheck(this, PCMFileRelationshipEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'relationships/files';
  }

  _createClass(PCMFileRelationshipEndpoint, [{
    key: "All",
    value: function All(productId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'GET');
    }
  }, {
    key: "Create",
    value: function Create(productId, resources) {
      var body = buildRelationshipData('file', resources);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'POST', body);
    }
  }, {
    key: "Delete",
    value: function Delete(productId, resources) {
      var body = buildRelationshipData('file', resources);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'DELETE', body);
    }
  }, {
    key: "Update",
    value: function Update(productId, resources) {
      var body = buildRelationshipData('file', resources);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'PUT', body);
    }
  }]);

  return PCMFileRelationshipEndpoint;
}();

var PCMVariationsRelationshipsEndpoint =
/*#__PURE__*/
function () {
  function PCMVariationsRelationshipsEndpoint(endpoint) {
    _classCallCheck(this, PCMVariationsRelationshipsEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'relationships/variations';
  }

  _createClass(PCMVariationsRelationshipsEndpoint, [{
    key: "All",
    value: function All(productId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'GET');
    }
  }, {
    key: "Create",
    value: function Create(productId, resources) {
      var body = buildRelationshipData('product-variation', resources, dasherize);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'POST', body);
    }
  }, {
    key: "Delete",
    value: function Delete(productId, resources) {
      var body = buildRelationshipData('product-variation', resources, dasherize);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'DELETE', body);
    }
  }, {
    key: "Update",
    value: function Update(productId, resources) {
      var body = buildRelationshipData('product-variation', resources, dasherize);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'PUT', body);
    }
  }]);

  return PCMVariationsRelationshipsEndpoint;
}();

var PCMTemplateRelationshipEndpoint =
/*#__PURE__*/
function () {
  function PCMTemplateRelationshipEndpoint(endpoint) {
    _classCallCheck(this, PCMTemplateRelationshipEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'relationships/templates';
  }

  _createClass(PCMTemplateRelationshipEndpoint, [{
    key: "All",
    value: function All(productId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'GET');
    }
  }, {
    key: "Create",
    value: function Create(productId, resources) {
      var body = buildRelationshipData('template', resources);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'POST', body);
    }
  }, {
    key: "Delete",
    value: function Delete(productId, resources) {
      var body = buildRelationshipData('template', resources);
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'DELETE', body);
    }
  }]);

  return PCMTemplateRelationshipEndpoint;
}();

var PCMMainImageRelationshipEndpoint =
/*#__PURE__*/
function () {
  function PCMMainImageRelationshipEndpoint(endpoint) {
    _classCallCheck(this, PCMMainImageRelationshipEndpoint);

    var config = _objectSpread({}, endpoint);

    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'relationships/main_image';
  }

  _createClass(PCMMainImageRelationshipEndpoint, [{
    key: "Get",
    value: function Get(productId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'GET');
    }
  }, {
    key: "Create",
    value: function Create(productId, fileId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'POST', {
        type: 'file',
        id: fileId
      });
    }
  }, {
    key: "Delete",
    value: function Delete(productId, fileId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'DELETE', {
        type: 'file',
        id: fileId
      });
    }
  }, {
    key: "Update",
    value: function Update(productId, fileId) {
      return this.request.send("products/".concat(productId, "/").concat(this.endpoint), 'PUT', {
        type: 'file',
        id: fileId
      });
    }
  }]);

  return PCMMainImageRelationshipEndpoint;
}();

var PCMEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(PCMEndpoint, _CRUDExtend);

  function PCMEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, PCMEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    config.version = 'pcm';
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PCMEndpoint).call(this, config));
    _this.FileRelationships = new PCMFileRelationshipEndpoint(config);
    _this.VariationsRelationships = new PCMVariationsRelationshipsEndpoint(config);
    _this.TemplateRelationships = new PCMTemplateRelationshipEndpoint(config);
    _this.MainImageRelationships = new PCMMainImageRelationshipEndpoint(config);
    _this.endpoint = 'products';
    return _this;
  }

  _createClass(PCMEndpoint, [{
    key: "BuildChildProducts",
    value: function BuildChildProducts(productId) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/build"), 'POST');
    }
  }, {
    key: "GetChildProducts",
    value: function GetChildProducts(productId) {
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("".concat(this.endpoint, "/").concat(productId, "/children"), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET');
    }
  }, {
    key: "ImportProducts",
    value: function ImportProducts(file) {
      return this.request.send("".concat(this.endpoint, "/import"), 'POST', file);
    }
  }]);

  return PCMEndpoint;
}(CRUDExtend);

var CategoriesEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(CategoriesEndpoint, _CRUDExtend);

  function CategoriesEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, CategoriesEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CategoriesEndpoint).call(this, endpoint));
    _this.endpoint = 'categories';
    return _this;
  }

  _createClass(CategoriesEndpoint, [{
    key: "Tree",
    value: function Tree() {
      return this.request.send("".concat(this.endpoint, "/tree"), 'GET');
    }
  }]);

  return CategoriesEndpoint;
}(CRUDExtend);

var CollectionsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(CollectionsEndpoint, _CRUDExtend);

  function CollectionsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, CollectionsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollectionsEndpoint).call(this, endpoint));
    _this.endpoint = 'collections';
    return _this;
  }

  return CollectionsEndpoint;
}(CRUDExtend);

var IntegrationsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(IntegrationsEndpoint, _CRUDExtend);

  function IntegrationsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, IntegrationsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(IntegrationsEndpoint).call(this, endpoint));
    _this.endpoint = 'integrations';
    return _this;
  }

  _createClass(IntegrationsEndpoint, [{
    key: "GetLogs",
    value: function GetLogs(slug) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/logs"), 'GET');
    }
  }]);

  return IntegrationsEndpoint;
}(CRUDExtend);

var OrdersEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(OrdersEndpoint, _BaseExtend);

  function OrdersEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, OrdersEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrdersEndpoint).call(this, endpoint));
    _this.endpoint = 'orders';
    return _this;
  }

  _createClass(OrdersEndpoint, [{
    key: "Items",
    value: function Items(id) {
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/items"), 'GET');
    }
  }, {
    key: "Payment",
    value: function Payment(id, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/payments"), 'POST', body);
    }
  }, {
    key: "Confirm",
    value: function Confirm(orderId, transactionId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(orderId, "/transactions/").concat(transactionId, "/confirm"), 'POST', body);
    }
  }, {
    key: "Transactions",
    value: function Transactions(id) {
      /* eslint-disable no-console */
      console.warn("DeprecationWarning: 'Order.Transactions(id)' will soon be deprecated. It's recommended you use Transactions class directly to get all, capture and refund transactions.");
      return this.request.send("".concat(this.endpoint, "/").concat(id, "/transactions"), 'GET');
    }
  }, {
    key: "Update",
    value: function Update(id, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'PUT', _objectSpread({}, body, {
        type: 'order'
      }));
    }
  }, {
    key: "anonymize",
    value: function anonymize(ids) {
      return this.request.send("".concat(this.endpoint, "/anonymize"), 'POST', ids);
    }
  }]);

  return OrdersEndpoint;
}(BaseExtend);

var GatewaysEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(GatewaysEndpoint, _BaseExtend);

  function GatewaysEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, GatewaysEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GatewaysEndpoint).call(this, endpoint));
    _this.endpoint = 'gateways';
    return _this;
  }

  _createClass(GatewaysEndpoint, [{
    key: "Update",
    value: function Update(slug, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug), 'PUT', body);
    }
  }, {
    key: "Enabled",
    value: function Enabled(slug, enabled) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug), 'PUT', {
        type: 'gateway',
        enabled: enabled
      });
    }
  }, {
    key: "GetSlugAttributes",
    value: function GetSlugAttributes(slug) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/attributes"), 'GET', undefined, token);
    }
  }, {
    key: "OnboardingLinks",
    value: function OnboardingLinks(slug, returnUrl) {
      var test = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/onboarding-links"), 'POST', {
        test: test,
        return_url: returnUrl
      });
    }
  }]);

  return GatewaysEndpoint;
}(BaseExtend);

var CustomersEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(CustomersEndpoint, _CRUDExtend);

  function CustomersEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, CustomersEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomersEndpoint).call(this, endpoint));
    _this.endpoint = 'customers';

    _this.sendToken = function (tokenRequestBody) {
      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _this.request.send("".concat(_this.endpoint, "/tokens"), 'POST', tokenRequestBody, null, _objectSpread({}, headers));
    };

    return _this;
  }

  _createClass(CustomersEndpoint, [{
    key: "TokenViaPassword",
    value: function TokenViaPassword(email, password, headers) {
      var body = {
        type: 'token',
        authentication_mechanism: 'password',
        email: email,
        password: password
      };
      return this.sendToken(body, headers);
    }
  }, {
    key: "TokenViaOIDC",
    value: function TokenViaOIDC(code, redirectUri, codeVerifier, headers) {
      var body = {
        type: 'token',
        authentication_mechanism: 'oidc',
        oauth_authorization_code: code,
        oauth_redirect_uri: redirectUri,
        oauth_code_verifier: codeVerifier
      };
      return this.sendToken(body, headers);
    }
  }, {
    key: "Token",
    value: function Token(email, password) {
      return this.TokenViaPassword(email, password);
    }
  }]);

  return CustomersEndpoint;
}(CRUDExtend);

var InventoriesEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(InventoriesEndpoint, _BaseExtend);

  function InventoriesEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, InventoriesEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InventoriesEndpoint).call(this, endpoint));
    _this.endpoint = 'inventories';
    return _this;
  }

  _createClass(InventoriesEndpoint, [{
    key: "Create",
    value: function Create(productId, quantity) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId), 'POST', {
        quantity: quantity
      });
    }
  }, {
    key: "Delete",
    value: function Delete(productId) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId), 'DELETE');
    }
  }, {
    key: "IncrementStock",
    value: function IncrementStock(productId, quantity) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/transactions"), 'POST', {
        action: 'increment',
        quantity: quantity,
        type: 'stock-transaction'
      });
    }
  }, {
    key: "DecrementStock",
    value: function DecrementStock(productId, quantity) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/transactions"), 'POST', {
        action: 'decrement',
        quantity: quantity,
        type: 'stock-transaction'
      });
    }
  }, {
    key: "AllocateStock",
    value: function AllocateStock(productId, quantity) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/transactions"), 'POST', {
        action: 'allocate',
        quantity: quantity,
        type: 'stock-transaction'
      });
    }
  }, {
    key: "DeallocateStock",
    value: function DeallocateStock(productId, quantity) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/transactions"), 'POST', {
        action: 'deallocate',
        quantity: quantity,
        type: 'stock-transaction'
      });
    }
  }, {
    key: "GetTransactions",
    value: function GetTransactions(productId) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/transactions"), 'GET');
    }
  }, {
    key: "GetTransaction",
    value: function GetTransaction(productId, transactionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(productId, "/transactions/").concat(transactionId), 'GET');
    }
  }, {
    key: "GetMultipleStock",
    value: function GetMultipleStock(productIds) {
      var body = productIds.map(function (id) {
        return {
          id: id
        };
      });
      return this.request.send("".concat(this.endpoint, "/multiple"), 'POST', body);
    }
  }]);

  return InventoriesEndpoint;
}(BaseExtend);

var Jobs =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(Jobs, _BaseExtend);

  function Jobs(endpoint) {
    var _this;

    _classCallCheck(this, Jobs);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Jobs).call(this, endpoint));
    _this.endpoint = 'jobs';
    return _this;
  }

  _createClass(Jobs, [{
    key: "All",
    value: function All() {
      return this.request.send("".concat(this.endpoint), 'GET');
    }
  }, {
    key: "Create",
    value: function Create(body) {
      return this.request.send("".concat(this.endpoint), 'POST', body);
    }
  }, {
    key: "GetFile",
    value: function GetFile(fileId) {
      return this.request.send("".concat(this.endpoint, "/").concat(fileId, "/file"), 'Get');
    }
  }, {
    key: "Get",
    value: function Get(fileId) {
      return this.request.send("".concat(this.endpoint, "/").concat(fileId), 'Get');
    }
  }]);

  return Jobs;
}(BaseExtend);

var FlowsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(FlowsEndpoint, _CRUDExtend);

  function FlowsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, FlowsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FlowsEndpoint).call(this, endpoint));
    _this.endpoint = 'flows';
    return _this;
  }

  _createClass(FlowsEndpoint, [{
    key: "AllTemplates",
    value: function AllTemplates(template) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("".concat(this.endpoint, "?template=").concat(template), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this);
    }
  }, {
    key: "GetEntries",
    value: function GetEntries(slug) {
      var limit = this.limit,
          offset = this.offset;
      return this.request.send(buildURL("".concat(this.endpoint, "/").concat(slug, "/entries"), {
        limit: limit,
        offset: offset
      }), 'GET');
    }
  }, {
    key: "GetEntry",
    value: function GetEntry(slug, entryId) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/entries/").concat(entryId), 'GET');
    }
  }, {
    key: "GetFields",
    value: function GetFields(slug) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/fields"), 'GET');
    }
  }, {
    key: "CreateEntry",
    value: function CreateEntry(slug, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/entries"), 'POST', _objectSpread({}, body, {
        type: 'entry'
      }));
    }
  }, {
    key: "UpdateEntry",
    value: function UpdateEntry(slug, entryId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/entries/").concat(entryId), 'PUT', _objectSpread({}, body, {
        type: 'entry'
      }));
    }
  }, {
    key: "DeleteEntry",
    value: function DeleteEntry(slug, entryId) {
      return this.request.send("".concat(this.endpoint, "/").concat(slug, "/entries/").concat(entryId), 'DELETE');
    }
  }, {
    key: "CreateEntryRelationship",
    value: function CreateEntryRelationship(flowSlug, entryId, fieldSlug) {
      var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var actualBody = body;

      if (Array.isArray(body) === false) {
        actualBody = _objectSpread({}, body);
      }

      return this.request.send("".concat(this.endpoint, "/").concat(flowSlug, "/entries/").concat(entryId, "/relationships/").concat(fieldSlug), 'POST', actualBody);
    }
  }, {
    key: "UpdateEntryRelationship",
    value: function UpdateEntryRelationship(flowSlug, entryId, fieldSlug) {
      var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var actualBody = body;

      if (Array.isArray(body) === false) {
        actualBody = _objectSpread({}, body);
      }

      return this.request.send("".concat(this.endpoint, "/").concat(flowSlug, "/entries/").concat(entryId, "/relationships/").concat(fieldSlug), 'PUT', actualBody);
    }
  }, {
    key: "DeleteEntryRelationship",
    value: function DeleteEntryRelationship(flowSlug, entryId, fieldSlug) {
      return this.request.send("".concat(this.endpoint, "/").concat(flowSlug, "/entries/").concat(entryId, "/relationships/").concat(fieldSlug), 'DELETE');
    }
  }, {
    key: "GetFlowTypeAttributes",
    value: function GetFlowTypeAttributes(flowType) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(flowType, "/attributes"), 'GET', undefined, token);
    }
  }]);

  return FlowsEndpoint;
}(CRUDExtend);

var PriceBookPricesEndpoint =
/*#__PURE__*/
function () {
  function PriceBookPricesEndpoint(endpoint) {
    _classCallCheck(this, PriceBookPricesEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'prices';
  } // TODO: API - currently not working! (can get from pricebook relationships)


  _createClass(PriceBookPricesEndpoint, [{
    key: "All",
    value: function All(_ref) {
      var pricebookId = _ref.pricebookId,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("pricebooks/".concat(pricebookId, "/").concat(this.endpoint), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this);
    }
  }, {
    key: "Filter",
    value: function Filter(filter) {
      this.filter = filter;
      return this;
    }
  }, {
    key: "Limit",
    value: function Limit(value) {
      this.limit = value;
      return this;
    }
  }, {
    key: "Offset",
    value: function Offset(value) {
      this.offset = value;
      return this;
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var pricebookId = _ref2.pricebookId,
          priceId = _ref2.priceId,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint, "/").concat(priceId), 'GET', undefined, token);
    }
  }, {
    key: "Create",
    value: function Create(_ref3) {
      var pricebookId = _ref3.pricebookId,
          body = _ref3.body,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint), 'POST', _objectSpread({}, body, {
        type: 'product-price'
      }), token);
    }
  }, {
    key: "Delete",
    value: function Delete(_ref4) {
      var pricebookId = _ref4.pricebookId,
          priceId = _ref4.priceId,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint, "/").concat(priceId), 'DELETE', undefined, token);
    }
  }, {
    key: "Update",
    value: function Update(_ref5) {
      var pricebookId = _ref5.pricebookId,
          priceId = _ref5.priceId,
          body = _ref5.body,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint, "/").concat(priceId), 'PUT', _objectSpread({}, body, {
        type: 'product-price'
      }), token);
    }
  }]);

  return PriceBookPricesEndpoint;
}();

var PriceBookPriceModifiersEndpoint =
/*#__PURE__*/
function () {
  function PriceBookPriceModifiersEndpoint(endpoint) {
    _classCallCheck(this, PriceBookPriceModifiersEndpoint);

    var config = _objectSpread({}, endpoint);

    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'modifiers';
  }

  _createClass(PriceBookPriceModifiersEndpoint, [{
    key: "All",
    value: function All(_ref) {
      var pricebookId = _ref.pricebookId,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("pricebooks/".concat(pricebookId, "/").concat(this.endpoint), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this);
    }
  }, {
    key: "Limit",
    value: function Limit(value) {
      this.limit = value;
      return this;
    }
  }, {
    key: "Offset",
    value: function Offset(value) {
      this.offset = value;
      return this;
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var pricebookId = _ref2.pricebookId,
          priceModifierId = _ref2.priceModifierId,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint, "/").concat(priceModifierId), 'GET', undefined, token);
    }
  }, {
    key: "Create",
    value: function Create(_ref3) {
      var pricebookId = _ref3.pricebookId,
          body = _ref3.body,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint), 'POST', _objectSpread({}, body, {
        type: 'price-modifier'
      }), token);
    }
  }, {
    key: "Update",
    value: function Update(_ref4) {
      var pricebookId = _ref4.pricebookId,
          priceModifierId = _ref4.priceModifierId,
          body = _ref4.body,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint, "/").concat(priceModifierId), 'PUT', _objectSpread({}, body, {
        type: 'price-modifier'
      }), token);
    }
  }, {
    key: "Delete",
    value: function Delete(_ref5) {
      var pricebookId = _ref5.pricebookId,
          priceModifierId = _ref5.priceModifierId,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("pricebooks/".concat(pricebookId, "/").concat(this.endpoint, "/").concat(priceModifierId), 'DELETE', undefined, token);
    }
  }]);

  return PriceBookPriceModifiersEndpoint;
}();

var PriceBooksEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(PriceBooksEndpoint, _CRUDExtend);

  function PriceBooksEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, PriceBooksEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    config.version = 'pcm';
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PriceBooksEndpoint).call(this, config));
    _this.Prices = new PriceBookPricesEndpoint(config);
    _this.PriceModifiers = new PriceBookPriceModifiersEndpoint(config);
    _this.endpoint = 'pricebooks';
    return _this;
  }

  return PriceBooksEndpoint;
}(CRUDExtend);

var FieldsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(FieldsEndpoint, _CRUDExtend);

  function FieldsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, FieldsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FieldsEndpoint).call(this, endpoint));
    _this.endpoint = 'fields';
    return _this;
  }

  return FieldsEndpoint;
}(CRUDExtend);

var Files =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(Files, _BaseExtend);

  function Files(endpoint) {
    var _this;

    _classCallCheck(this, Files);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Files).call(this, endpoint));
    _this.endpoint = 'files';
    return _this;
  }

  _createClass(Files, [{
    key: "Create",
    value: function Create(body) {
      var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var additionalHeaders = {}; // Allows users to specify content type, useful if using Node and an
      // implementation of FormData

      if (isNode()) {
        if (contentType === null) throw new Error('You must provide a content type header');
        additionalHeaders['Content-Type'] = contentType;
      }

      return this.request.send("".concat(this.endpoint), 'POST', body, undefined, undefined, false, undefined, additionalHeaders);
    }
  }, {
    key: "Link",
    value: function Link(url) {
      var form = new FormData$1();
      form.append('file_location', url); // Headers only need to be explicitly passed in a node environment.
      // Browsers will handle FormData headers natively

      var contentType = isNode() ? form.getHeaders()['content-type'] : null;
      return this.Create(form, contentType);
    }
  }, {
    key: "Delete",
    value: function Delete(id) {
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'DELETE');
    }
  }]);

  return Files;
}(BaseExtend);

var CustomerAddressesEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(CustomerAddressesEndpoint, _BaseExtend);

  function CustomerAddressesEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, CustomerAddressesEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomerAddressesEndpoint).call(this, endpoint));
    _this.endpoint = 'addresses';
    return _this;
  }

  _createClass(CustomerAddressesEndpoint, [{
    key: "All",
    value: function All(_ref) {
      var customer = _ref.customer,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      return this.request.send("customers/".concat(customer, "/").concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var customer = _ref2.customer,
          address = _ref2.address,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("customers/".concat(customer, "/").concat(this.endpoint, "/").concat(address), 'GET', undefined, token);
    }
  }, {
    key: "Create",
    value: function Create(_ref3) {
      var customer = _ref3.customer,
          body = _ref3.body,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("customers/".concat(customer, "/").concat(this.endpoint), 'POST', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), token);
    }
  }, {
    key: "Delete",
    value: function Delete(_ref4) {
      var customer = _ref4.customer,
          address = _ref4.address,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      return this.request.send("customers/".concat(customer, "/").concat(this.endpoint, "/").concat(address), 'DELETE', undefined, token);
    }
  }, {
    key: "Update",
    value: function Update(_ref5) {
      var customer = _ref5.customer,
          address = _ref5.address,
          body = _ref5.body,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("customers/".concat(customer, "/").concat(this.endpoint, "/").concat(address), 'PUT', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), token);
    }
  }]);

  return CustomerAddressesEndpoint;
}(BaseExtend);

var AccountAddressesEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(AccountAddressesEndpoint, _BaseExtend);

  function AccountAddressesEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, AccountAddressesEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountAddressesEndpoint).call(this, endpoint));
    _this.endpoint = 'addresses';
    return _this;
  }

  _createClass(AccountAddressesEndpoint, [{
    key: "All",
    value: function All(_ref) {
      var account = _ref.account,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("accounts/".concat(account, "/").concat(this.endpoint), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, undefined, this, true, null, token ? {
        'EP-ACCOUNT-MANAGEMENT-AUTHENTICATION-TOKEN': token
      } : undefined);
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var account = _ref2.account,
          address = _ref2.address,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("accounts/".concat(account, "/").concat(this.endpoint, "/").concat(address), 'GET', undefined, undefined, this, true, null, token ? {
        'EP-ACCOUNT-MANAGEMENT-AUTHENTICATION-TOKEN': token
      } : undefined);
    }
  }, {
    key: "Create",
    value: function Create(_ref3) {
      var account = _ref3.account,
          body = _ref3.body,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("accounts/".concat(account, "/").concat(this.endpoint), 'POST', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), undefined, this, true, null, token ? {
        'EP-ACCOUNT-MANAGEMENT-AUTHENTICATION-TOKEN': token
      } : undefined);
    }
  }, {
    key: "Delete",
    value: function Delete(_ref4) {
      var account = _ref4.account,
          address = _ref4.address,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      return this.request.send("accounts/".concat(account, "/").concat(this.endpoint, "/").concat(address), 'DELETE', undefined, undefined, this, true, null, token ? {
        'EP-ACCOUNT-MANAGEMENT-AUTHENTICATION-TOKEN': token
      } : undefined);
    }
  }, {
    key: "Update",
    value: function Update(_ref5) {
      var account = _ref5.account,
          address = _ref5.address,
          body = _ref5.body,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("accounts/".concat(account, "/").concat(this.endpoint, "/").concat(address), 'PUT', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), undefined, this, true, null, token ? {
        'EP-ACCOUNT-MANAGEMENT-AUTHENTICATION-TOKEN': token
      } : undefined);
    }
  }]);

  return AccountAddressesEndpoint;
}(BaseExtend);

var TransactionsEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(TransactionsEndpoint, _BaseExtend);

  function TransactionsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, TransactionsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionsEndpoint).call(this, endpoint));
    _this.endpoint = 'transactions';
    return _this;
  }

  _createClass(TransactionsEndpoint, [{
    key: "All",
    value: function All(_ref) {
      var order = _ref.order;
      return this.request.send("orders/".concat(order, "/").concat(this.endpoint), 'GET');
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var order = _ref2.order,
          transaction = _ref2.transaction;
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("orders/".concat(order, "/").concat(this.endpoint, "/").concat(transaction), 'GET', undefined, token);
    }
  }, {
    key: "Capture",
    value: function Capture(_ref3) {
      var order = _ref3.order,
          transaction = _ref3.transaction;
      return this.request.send("orders/".concat(order, "/").concat(this.endpoint, "/").concat(transaction, "/capture"), 'POST');
    }
  }, {
    key: "Refund",
    value: function Refund(_ref4, body) {
      var order = _ref4.order,
          transaction = _ref4.transaction;
      return this.request.send("orders/".concat(order, "/").concat(this.endpoint, "/").concat(transaction, "/refund"), 'POST', body);
    }
  }]);

  return TransactionsEndpoint;
}(BaseExtend);

var Settings =
/*#__PURE__*/
function () {
  function Settings(config) {
    _classCallCheck(this, Settings);

    this.request = new RequestFactory(config);
    this.endpoint = 'settings';
  }

  _createClass(Settings, [{
    key: "All",
    value: function All() {
      return this.request.send(this.endpoint, 'GET');
    }
  }, {
    key: "Update",
    value: function Update(body) {
      return this.request.send(this.endpoint, 'PUT', _objectSpread({
        type: 'settings'
      }, body));
    }
  }, {
    key: "Cart",
    value: function Cart() {
      return this.request.send("".concat(this.endpoint, "/cart"), 'GET');
    }
  }, {
    key: "UpdateCart",
    value: function UpdateCart(body) {
      return this.request.send("".concat(this.endpoint, "/cart"), 'PUT', _objectSpread({
        type: 'settings'
      }, body));
    }
  }]);

  return Settings;
}();

var MemoryStorageFactory =
/*#__PURE__*/
function () {
  function MemoryStorageFactory() {
    _classCallCheck(this, MemoryStorageFactory);

    this.state = new Map();
  }

  _createClass(MemoryStorageFactory, [{
    key: "set",
    value: function set(key, value) {
      this.state.set(key, value);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.state.get(key) || null;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this.state.delete(key);
    }
  }]);

  return MemoryStorageFactory;
}();

var PromotionsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(PromotionsEndpoint, _CRUDExtend);

  function PromotionsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, PromotionsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PromotionsEndpoint).call(this, endpoint));
    _this.endpoint = 'promotions';
    return _this;
  }

  _createClass(PromotionsEndpoint, [{
    key: "Attributes",
    value: function Attributes() {
      return this.request.send("".concat(this.endpoint, "/attributes"), 'GET');
    }
  }, {
    key: "Codes",
    value: function Codes(promotionId) {
      var limit = this.limit,
          offset = this.offset;
      return this.request.send(buildURL("".concat(this.endpoint, "/").concat(promotionId, "/codes"), {
        limit: limit,
        offset: offset
      }), 'GET');
    }
  }, {
    key: "AddCodes",
    value: function AddCodes(promotionId, codes) {
      return this.request.send("".concat(this.endpoint, "/").concat(promotionId, "/codes"), 'POST', {
        type: 'promotion_codes',
        codes: codes
      });
    }
  }, {
    key: "DeleteCode",
    value: function DeleteCode(promotionId, codeId) {
      return this.request.send("".concat(this.endpoint, "/").concat(promotionId, "/codes/").concat(codeId), 'DELETE');
    }
  }, {
    key: "DeleteCodes",
    value: function DeleteCodes(promotionId, codes) {
      return this.request.send("".concat(this.endpoint, "/").concat(promotionId, "/codes"), 'DELETE', {
        type: 'promotion_codes',
        codes: codes
      });
    }
  }, {
    key: "History",
    value: function History(promotionId) {
      var limit = this.limit,
          offset = this.offset;
      return this.request.send(buildURL("".concat(this.endpoint, "/").concat(promotionId, "/history"), {
        limit: limit,
        offset: offset
      }), 'GET');
    }
  }]);

  return PromotionsEndpoint;
}(CRUDExtend);

var VariationsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(VariationsEndpoint, _CRUDExtend);

  function VariationsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, VariationsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VariationsEndpoint).call(this, endpoint));
    _this.endpoint = 'variations';
    return _this;
  }

  _createClass(VariationsEndpoint, [{
    key: "Create",
    value: function Create(body) {
      return this.request.send(this.endpoint, 'POST', _objectSpread({}, body, {
        type: 'product-variation'
      }));
    }
  }, {
    key: "Update",
    value: function Update(id, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'PUT', _objectSpread({}, body, {
        type: 'product-variation'
      }), token);
    }
  }, {
    key: "Option",
    value: function Option(variationId, optionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId), 'GET');
    }
  }, {
    key: "Options",
    value: function Options(variationId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options"), 'GET');
    }
  }, {
    key: "CreateOption",
    value: function CreateOption(variationId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options"), 'post', body);
    }
  }, {
    key: "UpdateOption",
    value: function UpdateOption(variationId, optionId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId), 'PUT', body);
    }
  }, {
    key: "DeleteOption",
    value: function DeleteOption(variationId, optionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId), 'DELETE');
    }
  }, {
    key: "Modifier",
    value: function Modifier(variationId, optionId, modifierId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers/").concat(modifierId), 'GET');
    }
  }, {
    key: "Modifiers",
    value: function Modifiers(variationId, optionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers"), 'GET');
    }
  }, {
    key: "CreateModifier",
    value: function CreateModifier(variationId, optionId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers"), 'post', body);
    }
  }, {
    key: "UpdateModifier",
    value: function UpdateModifier(variationId, optionId, modifierId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers/").concat(modifierId), 'PUT', body);
    }
  }, {
    key: "DeleteModifier",
    value: function DeleteModifier(variationId, optionId, modifierId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers/").concat(modifierId), 'DELETE');
    }
  }]);

  return VariationsEndpoint;
}(CRUDExtend);

var AuthenticationRealmsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(AuthenticationRealmsEndpoint, _CRUDExtend);

  function AuthenticationRealmsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, AuthenticationRealmsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthenticationRealmsEndpoint).call(this, endpoint));
    _this.endpoint = 'authentication-realms';
    return _this;
  }

  _createClass(AuthenticationRealmsEndpoint, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL(this.endpoint, {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this, headers);
      return this.call;
    }
  }, {
    key: "Create",
    value: function Create(body) {
      return this.request.send(this.endpoint, 'POST', body.data);
    }
  }, {
    key: "Get",
    value: function Get(_ref) {
      var realmId = _ref.realmId,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      return this.request.send("".concat(this.endpoint, "/").concat(realmId), 'GET', undefined, token);
    }
  }]);

  return AuthenticationRealmsEndpoint;
}(CRUDExtend);

var OidcProfileEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(OidcProfileEndpoint, _CRUDExtend);

  function OidcProfileEndpoint(config) {
    var _this;

    _classCallCheck(this, OidcProfileEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OidcProfileEndpoint).call(this, config));
    _this.endpoint = 'authentication-realms/{{realmId}}/oidc-profiles';
    return _this;
  }

  _createClass(OidcProfileEndpoint, [{
    key: "All",
    value: function All(realmId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL(this.endpoint.replace('{{realmId}}', realmId), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this, headers);
      return this.call;
    }
  }, {
    key: "Create",
    value: function Create(realmId, body) {
      return this.request.send(this.endpoint.replace('{{realmId}}', realmId), 'POST', body.data);
    }
  }, {
    key: "Get",
    value: function Get(_ref) {
      var realmId = _ref.realmId,
          profileId = _ref.profileId,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token,
          _ref$headers = _ref.headers,
          headers = _ref$headers === void 0 ? {} : _ref$headers;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(profileId), 'GET', undefined, token, this, headers);
    }
  }, {
    key: "Update",
    value: function Update(realmId, profileId, body) {
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(profileId), 'PUT', body.data, token);
    }
  }, {
    key: "Delete",
    value: function Delete(realmId, profileId) {
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(profileId), 'DELETE');
    }
  }]);

  return OidcProfileEndpoint;
}(CRUDExtend);

var UserAuthenticationInfoEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(UserAuthenticationInfoEndpoint, _CRUDExtend);

  function UserAuthenticationInfoEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, UserAuthenticationInfoEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserAuthenticationInfoEndpoint).call(this, endpoint));
    _this.endpoint = 'authentication-realms/{{realmId}}/user-authentication-info';
    return _this;
  }

  _createClass(UserAuthenticationInfoEndpoint, [{
    key: "Create",
    value: function Create(realmId, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send(this.endpoint.replace('{{realmId}}', realmId), 'POST', body.data, token);
    }
  }, {
    key: "All",
    value: function All(realmId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("".concat(this.endpoint.replace('{{realmId}}', realmId)), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this, headers);
    }
  }, {
    key: "Get",
    value: function Get(realmId, userAuthenticationInfoId) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(userAuthenticationInfoId), 'GET', undefined, token);
    }
  }, {
    key: "Update",
    value: function Update(realmId, userAuthenticationInfoId, body) {
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(userAuthenticationInfoId), 'PUT', body.data, token);
    }
  }, {
    key: "Delete",
    value: function Delete(realmId, userAuthenticationInfoId) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(userAuthenticationInfoId), 'DELETE', undefined, token);
    }
  }]);

  return UserAuthenticationInfoEndpoint;
}(CRUDExtend);

var PasswordProfileEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(PasswordProfileEndpoint, _CRUDExtend);

  function PasswordProfileEndpoint(config) {
    var _this;

    _classCallCheck(this, PasswordProfileEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PasswordProfileEndpoint).call(this, config));
    _this.endpoint = 'authentication-realms/{{realmId}}/password-profiles';
    return _this;
  }

  _createClass(PasswordProfileEndpoint, [{
    key: "Create",
    value: function Create(realmId, body) {
      return this.request.send(this.endpoint.replace('{{realmId}}', realmId), 'POST', body.data);
    }
  }, {
    key: "All",
    value: function All(realmId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var limit = this.limit,
          offset = this.offset;
      return this.request.send(buildURL("".concat(this.endpoint.replace('{{realmId}}', realmId)), {
        limit: limit,
        offset: offset
      }), 'GET', undefined, token, this, headers);
    }
  }, {
    key: "Get",
    value: function Get(_ref) {
      var realmId = _ref.realmId,
          profileId = _ref.profileId;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(profileId), 'GET');
    }
  }, {
    key: "Update",
    value: function Update(realmId, profileId, body) {
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(profileId), 'PUT', body.data, token);
    }
  }, {
    key: "Delete",
    value: function Delete(realmId, profileId) {
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId), "/").concat(profileId), 'DELETE');
    }
  }]);

  return PasswordProfileEndpoint;
}(CRUDExtend);

var UserAuthenticationPasswordProfileEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(UserAuthenticationPasswordProfileEndpoint, _CRUDExtend);

  function UserAuthenticationPasswordProfileEndpoint(config) {
    var _this;

    _classCallCheck(this, UserAuthenticationPasswordProfileEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserAuthenticationPasswordProfileEndpoint).call(this, config));
    _this.endpoint = 'authentication-realms/{{realmId}}/user-authentication-info/{{userAuthenticationInfoId}}/user-authentication-password-profile-info';
    return _this;
  }

  _createClass(UserAuthenticationPasswordProfileEndpoint, [{
    key: "Create",
    value: function Create(realmId, userAuthenticationInfoId, body) {
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return this.request.send(this.endpoint.replace('{{realmId}}', realmId).replace('{{userAuthenticationInfoId}}', userAuthenticationInfoId), 'POST', body.data, token);
    }
  }, {
    key: "All",
    value: function All(realmId, userAuthenticationInfoId) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var limit = this.limit,
          offset = this.offset;
      return this.request.send(buildURL("".concat(this.endpoint.replace('{{realmId}}', realmId).replace('{{userAuthenticationInfoId}}', userAuthenticationInfoId)), {
        limit: limit,
        offset: offset
      }), 'GET', undefined, token, this, headers);
    }
  }, {
    key: "Get",
    value: function Get(realmId, userAuthenticationInfoId, userAuthenticationPasswordProfileId) {
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId).replace('{{userAuthenticationInfoId}}', userAuthenticationInfoId), "/").concat(userAuthenticationPasswordProfileId), 'GET', undefined, token);
    }
  }, {
    key: "Update",
    value: function Update(realmId, userAuthenticationInfoId, userAuthenticationPasswordProfileId, body) {
      var token = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId).replace('{{userAuthenticationInfoId}}', userAuthenticationInfoId), "/").concat(userAuthenticationPasswordProfileId), 'PUT', body.data, token);
    }
  }, {
    key: "Delete",
    value: function Delete(realmId, userAuthenticationInfoId, userAuthenticationPasswordProfileId) {
      var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return this.request.send("".concat(this.endpoint.replace('{{realmId}}', realmId).replace('{{userAuthenticationInfoId}}', userAuthenticationInfoId), "/").concat(userAuthenticationPasswordProfileId), 'DELETE', undefined, token);
    }
  }]);

  return UserAuthenticationPasswordProfileEndpoint;
}(CRUDExtend);

var AuthenticationSettingsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(AuthenticationSettingsEndpoint, _CRUDExtend);

  function AuthenticationSettingsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, AuthenticationSettingsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthenticationSettingsEndpoint).call(this, endpoint));
    _this.endpoint = 'settings/customer-authentication';
    return _this;
  }

  _createClass(AuthenticationSettingsEndpoint, [{
    key: "Get",
    value: function Get() {
      return this.request.send("".concat(this.endpoint), 'GET', undefined);
    }
  }]);

  return AuthenticationSettingsEndpoint;
}(CRUDExtend);

var NodesEndpoint =
/*#__PURE__*/
function () {
  function NodesEndpoint(endpoint) {
    _classCallCheck(this, NodesEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'nodes';
  } // TODO: API - currently not working! (can get from hierarchy relationships)


  _createClass(NodesEndpoint, [{
    key: "All",
    value: function All(_ref) {
      var hierarchyId = _ref.hierarchyId,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/").concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var hierarchyId = _ref2.hierarchyId,
          nodeId = _ref2.nodeId,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/").concat(this.endpoint, "/").concat(nodeId), 'GET', undefined, token);
    }
  }, {
    key: "Create",
    value: function Create(_ref3) {
      var hierarchyId = _ref3.hierarchyId,
          body = _ref3.body,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/").concat(this.endpoint), 'POST', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), token);
    }
  }, {
    key: "Delete",
    value: function Delete(_ref4) {
      var hierarchyId = _ref4.hierarchyId,
          nodeId = _ref4.nodeId,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/").concat(this.endpoint, "/").concat(nodeId), 'DELETE', undefined, token);
    }
  }, {
    key: "Update",
    value: function Update(_ref5) {
      var hierarchyId = _ref5.hierarchyId,
          nodeId = _ref5.nodeId,
          body = _ref5.body,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/").concat(this.endpoint, "/").concat(nodeId), 'PUT', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), token);
    }
  }, {
    key: "GetNodeChildren",
    value: function GetNodeChildren(_ref6) {
      var hierarchyId = _ref6.hierarchyId,
          nodeId = _ref6.nodeId,
          _ref6$token = _ref6.token,
          token = _ref6$token === void 0 ? null : _ref6$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/").concat(this.endpoint, "/").concat(nodeId, "/children"), 'GET', undefined, token);
    }
  }]);

  return NodesEndpoint;
}();

var NodeRelationshipsEndpoint =
/*#__PURE__*/
function () {
  function NodeRelationshipsEndpoint(endpoint) {
    _classCallCheck(this, NodeRelationshipsEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    this.request = new RequestFactory(config);
    config.version = 'pcm';
    this.endpoint = 'relationships/products';
  }

  _createClass(NodeRelationshipsEndpoint, [{
    key: "Create",
    value: function Create(_ref) {
      var hierarchyId = _ref.hierarchyId,
          nodeId = _ref.nodeId,
          body = _ref.body,
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/").concat(this.endpoint), 'POST', body, token);
    }
  }, {
    key: "Delete",
    value: function Delete(_ref2) {
      var hierarchyId = _ref2.hierarchyId,
          nodeId = _ref2.nodeId,
          body = _ref2.body,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/").concat(this.endpoint), 'DELETE', body, token);
    }
  }, {
    key: "Update",
    value: function Update(_ref3) {
      var hierarchyId = _ref3.hierarchyId,
          nodeId = _ref3.nodeId,
          body = _ref3.body,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/relationships/parent"), 'PUT', _objectSpread({}, body, {
        type: singularize(this.endpoint)
      }), token);
    }
  }, {
    key: "Products",
    value: function Products(_ref4) {
      var hierarchyId = _ref4.hierarchyId,
          nodeId = _ref4.nodeId,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      var limit = this.limit,
          offset = this.offset;
      return this.request.send(buildURL("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/products"), {
        limit: limit,
        offset: offset
      }), 'GET', null, token);
    }
  }, {
    key: "ChangeParent",
    value: function ChangeParent(_ref5) {
      var hierarchyId = _ref5.hierarchyId,
          nodeId = _ref5.nodeId,
          body = _ref5.body,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/relationships/parent"), 'PUT', body, token);
    }
  }, {
    key: "DeleteParent",
    value: function DeleteParent(_ref6) {
      var hierarchyId = _ref6.hierarchyId,
          nodeId = _ref6.nodeId,
          _ref6$token = _ref6.token,
          token = _ref6$token === void 0 ? null : _ref6$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/relationships/parent"), 'DELETE', undefined, token);
    }
  }, {
    key: "CreateChildrenSortOrder",
    value: function CreateChildrenSortOrder(_ref7) {
      var hierarchyId = _ref7.hierarchyId,
          nodeId = _ref7.nodeId,
          body = _ref7.body,
          _ref7$token = _ref7.token,
          token = _ref7$token === void 0 ? null : _ref7$token;
      return this.request.send("hierarchies/".concat(hierarchyId, "/nodes/").concat(nodeId, "/relationships/children"), 'POST', body, token);
    }
  }, {
    key: "Limit",
    value: function Limit(value) {
      this.limit = value;
      return this;
    }
  }, {
    key: "Offset",
    value: function Offset(value) {
      this.offset = value;
      return this;
    }
  }]);

  return NodeRelationshipsEndpoint;
}();

var HierarchiesEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(HierarchiesEndpoint, _CRUDExtend);

  function HierarchiesEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, HierarchiesEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    config.version = 'pcm';
    _this = _possibleConstructorReturn(this, _getPrototypeOf(HierarchiesEndpoint).call(this, config));
    _this.Nodes = new NodesEndpoint(config);
    _this.Relationships = new NodeRelationshipsEndpoint(config);
    _this.endpoint = 'hierarchies';
    return _this;
  }

  _createClass(HierarchiesEndpoint, [{
    key: "Children",
    value: function Children(id) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var limit = this.limit,
          offset = this.offset;
      this.call = this.request.send(buildURL("".concat(this.endpoint, "/").concat(id, "/children"), {
        limit: limit,
        offset: offset
      }), 'GET', null, token);
      return this.call;
    }
  }, {
    key: "Duplicate",
    value: function Duplicate(hierarchyId, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(hierarchyId, "/duplicate"), 'POST', body, token);
    }
  }]);

  return HierarchiesEndpoint;
}(CRUDExtend);

var MerchantRealmMappings =
/*#__PURE__*/
function () {
  function MerchantRealmMappings(config) {
    _classCallCheck(this, MerchantRealmMappings);

    this.request = new RequestFactory(config);
    this.endpoint = 'merchant-realm-mappings';
  }

  _createClass(MerchantRealmMappings, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      this.call = this.request.send(this.endpoint, 'GET', undefined, token, this);
      return this.call;
    }
  }, {
    key: "Update",
    value: function Update(id, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'PUT', _objectSpread({}, body, {
        type: this.endpoint
      }), token);
    }
  }]);

  return MerchantRealmMappings;
}();

var AccountsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(AccountsEndpoint, _CRUDExtend);

  function AccountsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, AccountsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountsEndpoint).call(this, endpoint));
    _this.endpoint = 'accounts';
    return _this;
  }

  _createClass(AccountsEndpoint, [{
    key: "Create",
    value: function Create(body) {
      return this.request.send(this.endpoint, 'POST', body);
    }
  }, {
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL(this.endpoint, {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this, headers);
      return this.call;
    }
  }]);

  return AccountsEndpoint;
}(CRUDExtend);

var AccountMembersEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(AccountMembersEndpoint, _BaseExtend);

  function AccountMembersEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, AccountMembersEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountMembersEndpoint).call(this, endpoint));
    _this.endpoint = 'account-members';
    return _this;
  }

  _createClass(AccountMembersEndpoint, [{
    key: "Get",
    value: function Get(accountMemberId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(accountMemberId), 'GET', undefined, token);
    }
  }, {
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL(this.endpoint, {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this, headers);
      return this.call;
    }
  }, {
    key: "UnassignedAccountMembers",
    value: function UnassignedAccountMembers(accountId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL("accounts/".concat(accountId, "/account-memberships/unassigned-account-members"), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this);
      return this.call;
    }
  }]);

  return AccountMembersEndpoint;
}(BaseExtend);

var AccountAuthenticationSettingsEndpoint =
/*#__PURE__*/
function () {
  function AccountAuthenticationSettingsEndpoint(config) {
    _classCallCheck(this, AccountAuthenticationSettingsEndpoint);

    this.request = new RequestFactory(config);
    this.endpoint = 'settings/account-authentication';
  }

  _createClass(AccountAuthenticationSettingsEndpoint, [{
    key: "Get",
    value: function Get() {
      return this.request.send("".concat(this.endpoint), 'GET', undefined);
    }
  }]);

  return AccountAuthenticationSettingsEndpoint;
}();

var AccountMembershipsEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(AccountMembershipsEndpoint, _BaseExtend);

  function AccountMembershipsEndpoint() {
    _classCallCheck(this, AccountMembershipsEndpoint);

    return _possibleConstructorReturn(this, _getPrototypeOf(AccountMembershipsEndpoint).apply(this, arguments));
  }

  _createClass(AccountMembershipsEndpoint, [{
    key: "Create",
    value: function Create(accountId, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("accounts/".concat(accountId, "/account-memberships"), 'POST', body, token, this);
    }
  }, {
    key: "All",
    value: function All(accountId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter,
          includes = this.includes;
      this.call = this.request.send(buildURL("accounts/".concat(accountId, "/account-memberships"), {
        limit: limit,
        offset: offset,
        filter: filter,
        includes: includes
      }), 'GET', undefined, token, this);
      return this.call;
    }
  }, {
    key: "Get",
    value: function Get(accountId, accountMembershipId) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("accounts/".concat(accountId, "/account-memberships/").concat(accountMembershipId), 'GET', undefined, token);
    }
  }, {
    key: "Delete",
    value: function Delete(accountId, accountMembershipId) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("accounts/".concat(accountId, "/account-memberships/").concat(accountMembershipId), 'DELETE', undefined, token);
    }
  }]);

  return AccountMembershipsEndpoint;
}(BaseExtend);

var PCMVariationsEndpoint =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(PCMVariationsEndpoint, _CRUDExtend);

  function PCMVariationsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, PCMVariationsEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    config.version = 'pcm';
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PCMVariationsEndpoint).call(this, config));
    _this.endpoint = 'variations';
    return _this;
  }

  _createClass(PCMVariationsEndpoint, [{
    key: "CreateVariation",
    value: function CreateVariation(body) {
      return this.request.send(this.endpoint, 'POST', _objectSpread({}, body, {
        type: 'product-variation'
      }));
    }
  }, {
    key: "UpdateVariation",
    value: function UpdateVariation(id, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("".concat(this.endpoint, "/").concat(id), 'PUT', _objectSpread({}, body, {
        type: 'product-variation'
      }), token);
    }
  }, {
    key: "VariationsOption",
    value: function VariationsOption(variationId, optionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId), 'GET');
    }
  }, {
    key: "VariationsOptions",
    value: function VariationsOptions(variationId) {
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("".concat(this.endpoint, "/").concat(variationId, "/options"), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET');
    }
  }, {
    key: "CreateVariationsOption",
    value: function CreateVariationsOption(variationId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options"), 'post', _objectSpread({}, body, {
        type: 'product-variation-option'
      }));
    }
  }, {
    key: "UpdateVariationsOption",
    value: function UpdateVariationsOption(variationId, optionId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId), 'PUT', _objectSpread({}, body, {
        type: 'product-variation-option'
      }));
    }
  }, {
    key: "DeleteVariationsOption",
    value: function DeleteVariationsOption(variationId, optionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId), 'DELETE');
    }
  }, {
    key: "VariationsModifier",
    value: function VariationsModifier(variationId, optionId, modifierId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers/").concat(modifierId), 'GET');
    }
  }, {
    key: "VariationsModifiers",
    value: function VariationsModifiers(variationId, optionId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers"), 'GET');
    }
  }, {
    key: "CreateVariationsModifier",
    value: function CreateVariationsModifier(variationId, optionId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers"), 'post', _objectSpread({}, body, {
        type: 'product-variation-modifier'
      }));
    }
  }, {
    key: "UpdateVariationsModifier",
    value: function UpdateVariationsModifier(variationId, optionId, modifierId, body) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers/").concat(modifierId), 'PUT', _objectSpread({}, body, {
        type: 'product-variation-modifier',
        id: modifierId
      }));
    }
  }, {
    key: "DeleteVariationsModifier",
    value: function DeleteVariationsModifier(variationId, optionId, modifierId) {
      return this.request.send("".concat(this.endpoint, "/").concat(variationId, "/options/").concat(optionId, "/modifiers/").concat(modifierId), 'DELETE');
    }
  }]);

  return PCMVariationsEndpoint;
}(CRUDExtend);

var MetricsEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(MetricsEndpoint, _BaseExtend);

  function MetricsEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, MetricsEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MetricsEndpoint).call(this, endpoint));
    _this.endpoint = 'metrics';
    return _this;
  }

  _createClass(MetricsEndpoint, [{
    key: "TotalOrders",
    value: function TotalOrders(query) {
      var formattedString = formatQueryParams(query);
      return this.request.send("".concat(this.endpoint, "/orders/total?").concat(formattedString), 'GET');
    }
  }, {
    key: "TotalValue",
    value: function TotalValue(query) {
      var formattedString = formatQueryParams(query);
      return this.request.send("".concat(this.endpoint, "/orders/value?").concat(formattedString), 'GET');
    }
  }]);

  return MetricsEndpoint;
}(BaseExtend);

var PersonalDataEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(PersonalDataEndpoint, _BaseExtend);

  function PersonalDataEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, PersonalDataEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PersonalDataEndpoint).call(this, endpoint));
    _this.endpoint = 'personal-data/logs';
    return _this;
  }

  _createClass(PersonalDataEndpoint, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      var url = buildURL(this.endpoint, {
        limit: limit,
        offset: offset,
        filter: filter
      });
      return this.request.send(url, 'GET', undefined, token, this);
    }
  }, {
    key: "Filter",
    value: function Filter(resourceType, resourceId) {
      this.filter = {
        eq: {
          resource_type: resourceType,
          resource_id: resourceId
        }
      };
      return this;
    }
  }]);

  return PersonalDataEndpoint;
}(BaseExtend);

var DataEntriesEndpoint =
/*#__PURE__*/
function (_BaseExtend) {
  _inherits(DataEntriesEndpoint, _BaseExtend);

  function DataEntriesEndpoint(endpoint) {
    var _this;

    _classCallCheck(this, DataEntriesEndpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataEntriesEndpoint).call(this, endpoint));
    _this.endpoint = 'personal-data/related-data-entries';
    return _this;
  }

  _createClass(DataEntriesEndpoint, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      var url = buildURL(this.endpoint, {
        limit: limit,
        offset: offset,
        filter: filter
      });
      return this.request.send(url, 'GET', undefined, token, this);
    }
  }, {
    key: "Filter",
    value: function Filter(resourceType, resourceId) {
      this.filter = {
        eq: {
          resource_type: resourceType,
          resource_id: resourceId
        }
      };
      return this;
    }
  }]);

  return DataEntriesEndpoint;
}(BaseExtend);

var Nodes =
/*#__PURE__*/
function () {
  function Nodes(endpoint) {
    _classCallCheck(this, Nodes);

    this.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    this.request = new RequestFactory(this.config);
    this.config.version = 'pcm';
    this.endpoint = 'nodes';
  }

  _createClass(Nodes, [{
    key: "All",
    value: function All(_ref) {
      var _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;
      return this.request.send("catalogs/".concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var nodeId = _ref2.nodeId,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(nodeId), 'GET', undefined, token);
    }
  }, {
    key: "GetNodeChildren",
    value: function GetNodeChildren(_ref3) {
      var nodeId = _ref3.nodeId,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(nodeId, "/relationships/children"), 'GET', undefined, token);
    }
  }, {
    key: "GetNodeChildrenFromCatalogReleases",
    value: function GetNodeChildrenFromCatalogReleases(_ref4) {
      var catalogId = _ref4.catalogId,
          releaseId = _ref4.releaseId,
          nodeId = _ref4.nodeId,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      return this.request.send("catalogs/".concat(catalogId, "/releases/").concat(releaseId, "/").concat(this.endpoint, "/").concat(nodeId, "/relationships/children"), 'GET', undefined, token);
    }
  }, {
    key: "GetAllCatalogNodes",
    value: function GetAllCatalogNodes(_ref5) {
      var catalogId = _ref5.catalogId,
          releaseId = _ref5.releaseId,
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;
      return this.request.send("catalogs/".concat(catalogId, "/releases/").concat(releaseId, "/").concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "GetNodeInCatalogRelease",
    value: function GetNodeInCatalogRelease(_ref6) {
      var catalogId = _ref6.catalogId,
          releaseId = _ref6.releaseId,
          nodeId = _ref6.nodeId,
          _ref6$token = _ref6.token,
          token = _ref6$token === void 0 ? null : _ref6$token;
      return this.request.send("catalogs/".concat(catalogId, "/releases/").concat(releaseId, "/").concat(this.endpoint, "/").concat(nodeId), 'GET', undefined, token);
    }
  }]);

  return Nodes;
}();

var Products =
/*#__PURE__*/
function (_CRUDExtend) {
  _inherits(Products, _CRUDExtend);

  function Products(endpoint) {
    var _this;

    _classCallCheck(this, Products);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Products).call(this, endpoint));
    _this.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    _this.request = new RequestFactory(_this.config);
    _this.config.version = 'pcm';
    _this.endpoint = 'products';
    return _this;
  }

  _createClass(Products, [{
    key: "All",
    value: function All(_ref7) {
      var _ref7$token = _ref7.token,
          token = _ref7$token === void 0 ? null : _ref7$token;
      return this.request.send("catalogs/".concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref8) {
      var productId = _ref8.productId,
          _ref8$token = _ref8.token,
          token = _ref8$token === void 0 ? null : _ref8$token;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(productId), 'GET', undefined, token);
    }
  }, {
    key: "GetProduct",
    value: function GetProduct(_ref9) {
      var catalogId = _ref9.catalogId,
          releaseId = _ref9.releaseId,
          productId = _ref9.productId,
          _ref9$token = _ref9.token,
          token = _ref9$token === void 0 ? null : _ref9$token;
      return this.request.send("catalogs/".concat(catalogId, "/releases/").concat(releaseId, "/").concat(this.endpoint, "/").concat(productId), 'GET', undefined, token);
    }
  }, {
    key: "GetCatalogNodeProducts",
    value: function GetCatalogNodeProducts(_ref10) {
      var catalogId = _ref10.catalogId,
          releaseId = _ref10.releaseId,
          nodeId = _ref10.nodeId,
          _ref10$token = _ref10.token,
          token = _ref10$token === void 0 ? null : _ref10$token;
      return this.request.send("catalogs/".concat(catalogId, "/releases/").concat(releaseId, "/nodes/").concat(nodeId, "/relationships/").concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "GetProductsByNode",
    value: function GetProductsByNode(_ref11) {
      var nodeId = _ref11.nodeId,
          _ref11$token = _ref11.token,
          token = _ref11$token === void 0 ? null : _ref11$token;
      return this.request.send("catalogs/nodes/".concat(nodeId, "/relationships/").concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "GetCatalogProducts",
    value: function GetCatalogProducts(_ref12) {
      var catalogId = _ref12.catalogId,
          releaseId = _ref12.releaseId,
          _ref12$token = _ref12.token,
          token = _ref12$token === void 0 ? null : _ref12$token;
      var limit = this.limit,
          offset = this.offset,
          includes = this.includes,
          sort = this.sort,
          filter = this.filter;
      return this.request.send(buildURL("catalogs/".concat(catalogId, "/releases/").concat(releaseId, "/").concat(this.endpoint), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token);
    }
  }]);

  return Products;
}(CRUDExtend);

var Releases =
/*#__PURE__*/
function () {
  function Releases(endpoint) {
    _classCallCheck(this, Releases);

    this.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    this.request = new RequestFactory(this.config);
    this.config.version = 'pcm';
    this.endpoint = 'releases';
  }

  _createClass(Releases, [{
    key: "All",
    value: function All(_ref13) {
      var catalogId = _ref13.catalogId,
          _ref13$token = _ref13.token,
          token = _ref13$token === void 0 ? null : _ref13$token;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(catalogId), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref14) {
      var catalogId = _ref14.catalogId,
          releaseId = _ref14.releaseId,
          _ref14$token = _ref14.token,
          token = _ref14$token === void 0 ? null : _ref14$token;
      return this.request.send("catalogs/".concat(catalogId, "/").concat(this.endpoint, "/").concat(releaseId), 'GET', undefined, token);
    }
  }, {
    key: "GetAllHierarchies",
    value: function GetAllHierarchies(_ref15) {
      var catalogId = _ref15.catalogId,
          releaseId = _ref15.releaseId,
          _ref15$token = _ref15.token,
          token = _ref15$token === void 0 ? null : _ref15$token;
      return this.request.send("catalogs/".concat(catalogId, "/").concat(this.endpoint, "/").concat(releaseId, "/hierarchies"), 'GET', undefined, token);
    }
  }, {
    key: "Create",
    value: function Create(_ref16) {
      var catalogId = _ref16.catalogId,
          _ref16$token = _ref16.token,
          token = _ref16$token === void 0 ? null : _ref16$token;
      return this.request.send("catalogs/".concat(catalogId, "/").concat(this.endpoint), 'POST', token);
    }
  }]);

  return Releases;
}();

var Rules =
/*#__PURE__*/
function (_CRUDExtend2) {
  _inherits(Rules, _CRUDExtend2);

  function Rules(endpoint) {
    var _this2;

    _classCallCheck(this, Rules);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Rules).call(this, endpoint));
    _this2.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    _this2.request = new RequestFactory(_this2.config);
    _this2.config.version = 'pcm';
    _this2.endpoint = 'rules';
    return _this2;
  }

  _createClass(Rules, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("catalogs/".concat(this.endpoint), {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(catalogRuleId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(catalogRuleId), 'GET', undefined, token);
    }
  }, {
    key: "Create",
    value: function Create(body) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("catalogs/".concat(this.endpoint), 'POST', body, token);
    }
  }, {
    key: "Update",
    value: function Update(catalogRuleId, body) {
      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(catalogRuleId), "PUT", body, token);
    }
  }, {
    key: "Delete",
    value: function Delete(catalogRuleId) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.request.send("catalogs/".concat(this.endpoint, "/").concat(catalogRuleId), "DELETE", token);
    }
  }]);

  return Rules;
}(CRUDExtend);

var CatalogsEndpoint =
/*#__PURE__*/
function (_CRUDExtend3) {
  _inherits(CatalogsEndpoint, _CRUDExtend3);

  function CatalogsEndpoint(endpoint) {
    var _this3;

    _classCallCheck(this, CatalogsEndpoint);

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    config.version = 'pcm';
    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(CatalogsEndpoint).call(this, config));
    _this3.Nodes = new Nodes(endpoint);
    _this3.Products = new Products(endpoint);
    _this3.Releases = new Releases(endpoint);
    _this3.Rules = new Rules(endpoint);
    _this3.endpoint = 'catalogs';
    return _this3;
  }

  return CatalogsEndpoint;
}(CRUDExtend);

var CatalogQuery =
/*#__PURE__*/
function () {
  function CatalogQuery() {
    _classCallCheck(this, CatalogQuery);
  }

  _createClass(CatalogQuery, [{
    key: "Filter",
    value: function Filter(filter) {
      this.filter = filter;
      return this;
    }
  }, {
    key: "Limit",
    value: function Limit(value) {
      this.limit = value;
      return this;
    }
  }, {
    key: "Offset",
    value: function Offset(value) {
      this.offset = value;
      return this;
    }
  }]);

  return CatalogQuery;
}();

var CatalogProductsQuery =
/*#__PURE__*/
function (_CatalogQuery) {
  _inherits(CatalogProductsQuery, _CatalogQuery);

  function CatalogProductsQuery() {
    _classCallCheck(this, CatalogProductsQuery);

    return _possibleConstructorReturn(this, _getPrototypeOf(CatalogProductsQuery).apply(this, arguments));
  }

  _createClass(CatalogProductsQuery, [{
    key: "With",
    value: function With(includes) {
      if (includes) this.includes = includes.toString().toLowerCase();
      return this;
    }
  }]);

  return CatalogProductsQuery;
}(CatalogQuery);

var Nodes$1 =
/*#__PURE__*/
function (_CatalogQuery2) {
  _inherits(Nodes, _CatalogQuery2);

  function Nodes(endpoint) {
    var _this;

    _classCallCheck(this, Nodes);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Nodes).call(this));
    _this.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    _this.request = new RequestFactory(_this.config);
    _this.config.version = '';
    _this.endpoint = 'nodes';
    return _this;
  }

  _createClass(Nodes, [{
    key: "All",
    value: function All(options) {
      var _ref = options || {
        token: null
      },
          _ref$token = _ref.token,
          token = _ref$token === void 0 ? null : _ref$token;

      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("catalog/".concat(this.endpoint), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref2) {
      var nodeId = _ref2.nodeId,
          _ref2$token = _ref2.token,
          token = _ref2$token === void 0 ? null : _ref2$token;
      return this.request.send("catalog/".concat(this.endpoint, "/").concat(nodeId), 'GET', undefined, token);
    }
  }, {
    key: "GetNodeChildren",
    value: function GetNodeChildren(_ref3) {
      var nodeId = _ref3.nodeId,
          _ref3$token = _ref3.token,
          token = _ref3$token === void 0 ? null : _ref3$token;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("catalog/".concat(this.endpoint, "/").concat(nodeId, "/relationships/children"), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token);
    }
  }, {
    key: "GetNodeProducts",
    value: function GetNodeProducts(_ref4) {
      var nodeId = _ref4.nodeId,
          _ref4$token = _ref4.token,
          token = _ref4$token === void 0 ? null : _ref4$token;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      return this.request.send(buildURL("catalog/".concat(this.endpoint, "/").concat(nodeId, "/relationships/products"), {
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token);
    }
  }]);

  return Nodes;
}(CatalogQuery);

var Hierarchies =
/*#__PURE__*/
function (_CatalogQuery3) {
  _inherits(Hierarchies, _CatalogQuery3);

  function Hierarchies(endpoint) {
    var _this2;

    _classCallCheck(this, Hierarchies);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Hierarchies).call(this));
    _this2.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    _this2.request = new RequestFactory(_this2.config);
    _this2.config.version = '';
    _this2.endpoint = 'hierarchies';
    return _this2;
  }

  _createClass(Hierarchies, [{
    key: "All",
    value: function All(options) {
      var _ref5 = options || {
        token: null
      },
          _ref5$token = _ref5.token,
          token = _ref5$token === void 0 ? null : _ref5$token;

      return this.request.send("catalog/".concat(this.endpoint), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref6) {
      var hierarchyId = _ref6.hierarchyId,
          _ref6$token = _ref6.token,
          token = _ref6$token === void 0 ? null : _ref6$token;
      return this.request.send("catalog/".concat(this.endpoint, "/").concat(hierarchyId), 'GET', undefined, token);
    }
  }, {
    key: "GetHierarchyChildren",
    value: function GetHierarchyChildren(_ref7) {
      var hierarchyId = _ref7.hierarchyId,
          _ref7$token = _ref7.token,
          token = _ref7$token === void 0 ? null : _ref7$token;
      return this.request.send("catalog/".concat(this.endpoint, "/").concat(hierarchyId, "/children"), 'GET', undefined, token);
    }
  }, {
    key: "GetHierarchyNodes",
    value: function GetHierarchyNodes() {
      var _ref8 = options || {
        token: null
      },
          _ref8$token = _ref8.token,
          token = _ref8$token === void 0 ? null : _ref8$token;

      return this.request.send("catalog/".concat(this.endpoint, "/latest/nodes"), 'GET', undefined, token);
    }
  }]);

  return Hierarchies;
}(CatalogQuery);

var Products$1 =
/*#__PURE__*/
function (_CatalogProductsQuery) {
  _inherits(Products, _CatalogProductsQuery);

  function Products(endpoint) {
    var _this3;

    _classCallCheck(this, Products);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Products).call(this));
    _this3.config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM

    _this3.request = new RequestFactory(_this3.config);
    _this3.config.version = '';
    _this3.endpoint = 'products';
    return _this3;
  }

  _createClass(Products, [{
    key: "All",
    value: function All(options) {
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter,
          includes = this.includes;

      var _ref9 = options || {
        token: null
      },
          _ref9$token = _ref9.token,
          token = _ref9$token === void 0 ? null : _ref9$token;

      return this.request.send(buildURL("catalog/".concat(this.endpoint), {
        limit: limit,
        offset: offset,
        filter: filter,
        includes: includes
      }), 'GET', undefined, token);
    }
  }, {
    key: "Get",
    value: function Get(_ref10) {
      var productId = _ref10.productId,
          _ref10$token = _ref10.token,
          token = _ref10$token === void 0 ? null : _ref10$token;
      var includes = this.includes;
      return this.request.send(buildURL("catalog/".concat(this.endpoint, "/").concat(productId), {
        includes: includes
      }), 'GET', undefined, token);
    }
  }, {
    key: "GetProductsByNode",
    value: function GetProductsByNode(_ref11) {
      var nodeId = _ref11.nodeId,
          _ref11$token = _ref11.token,
          token = _ref11$token === void 0 ? null : _ref11$token;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter,
          includes = this.includes;
      return this.request.send(buildURL("catalog/nodes/".concat(nodeId, "/relationships/").concat(this.endpoint), {
        limit: limit,
        offset: offset,
        filter: filter,
        includes: includes
      }), 'GET', undefined, token);
    }
  }, {
    key: "GetProductsByHierarchy",
    value: function GetProductsByHierarchy(_ref12) {
      var hierarchyId = _ref12.hierarchyId,
          _ref12$token = _ref12.token,
          token = _ref12$token === void 0 ? null : _ref12$token;
      var limit = this.limit,
          offset = this.offset,
          filter = this.filter,
          includes = this.includes;
      return this.request.send(buildURL("catalog/hierarchies/".concat(hierarchyId, "/").concat(this.endpoint), {
        limit: limit,
        offset: offset,
        filter: filter,
        includes: includes
      }), 'GET', undefined, token);
    }
  }]);

  return Products;
}(CatalogProductsQuery);

var Catalog =
/*#__PURE__*/
function () {
  function Catalog(endpoint) {
    _classCallCheck(this, Catalog);

    this.config = _objectSpread({}, endpoint);
    this.request = new RequestFactory(this.config);
    this.config.version = '';
    this.endpoint = 'catalog';
  }

  _createClass(Catalog, [{
    key: "Get",
    value: function Get() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      this.call = this.request.send("".concat(this.endpoint), 'GET', undefined, token);
      return this.call;
    }
  }]);

  return Catalog;
}();

var CatalogEndpoint =
/*#__PURE__*/
function (_CatalogQuery4) {
  _inherits(CatalogEndpoint, _CatalogQuery4);

  function CatalogEndpoint(endpoint) {
    var _this4;

    _classCallCheck(this, CatalogEndpoint);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(CatalogEndpoint).call(this));

    var config = _objectSpread({}, endpoint); // Need to clone config so it is only updated in PCM


    config.version = 'pcm';
    _this4.Nodes = new Nodes$1(endpoint);
    _this4.Hierarchies = new Hierarchies(endpoint);
    _this4.Products = new Products$1(endpoint);
    _this4.Catalog = new Catalog(endpoint);
    _this4.endpoint = 'catalogs';
    _this4.request = new RequestFactory(config);
    return _this4;
  }

  _createClass(CatalogEndpoint, [{
    key: "All",
    value: function All() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var includes = this.includes,
          sort = this.sort,
          limit = this.limit,
          offset = this.offset,
          filter = this.filter;
      this.call = this.request.send(buildURL(this.endpoint, {
        includes: includes,
        sort: sort,
        limit: limit,
        offset: offset,
        filter: filter
      }), 'GET', undefined, token, this);
      return this.call;
    }
  }]);

  return CatalogEndpoint;
}(CatalogQuery);

var Moltin =
/*#__PURE__*/
function () {
  function Moltin(config) {
    _classCallCheck(this, Moltin);

    this.config = config;
    if (!config.disableCart) this.cartId = cartIdentifier(config.storage);

    this.tokenInvalid = function () {
      return tokenInvalid(config);
    };

    this.request = new RequestFactory(config);
    this.storage = config.storage;

    this.credentials = function () {
      return getCredentials(config.storage);
    };

    this.Products = new ProductsEndpoint(config);
    this.PCM = new PCMEndpoint(config);
    this.Catalogs = new CatalogsEndpoint(config);
    this.Catalog = new CatalogEndpoint(config);
    this.Currencies = new CurrenciesEndpoint(config);
    this.Brands = new BrandsEndpoint(config);
    this.PriceBooks = new PriceBooksEndpoint(config);
    this.Categories = new CategoriesEndpoint(config);
    this.Hierarchies = new HierarchiesEndpoint(config);
    this.Collections = new CollectionsEndpoint(config);
    this.Integrations = new IntegrationsEndpoint(config);
    this.Orders = new OrdersEndpoint(config);
    this.Gateways = new GatewaysEndpoint(config);
    this.Customers = new CustomersEndpoint(config);
    this.Inventories = new InventoriesEndpoint(config);
    this.Jobs = new Jobs(config);
    this.Files = new Files(config);
    this.Flows = new FlowsEndpoint(config);
    this.Fields = new FieldsEndpoint(config);
    this.CustomerAddresses = new CustomerAddressesEndpoint(config);
    this.AccountAddresses = new AccountAddressesEndpoint(config);
    this.Transactions = new TransactionsEndpoint(config);
    this.Settings = new Settings(config);
    this.Promotions = new PromotionsEndpoint(config);
    this.Variations = new VariationsEndpoint(config);
    this.PCMVariations = new PCMVariationsEndpoint(config);
    this.PersonalData = new PersonalDataEndpoint(config);
    this.DataEntries = new DataEntriesEndpoint(config);
    this.AuthenticationRealm = new AuthenticationRealmsEndpoint(config);
    this.OidcProfile = new OidcProfileEndpoint(config);
    this.UserAuthenticationInfo = new UserAuthenticationInfoEndpoint(config);
    this.PasswordProfile = new PasswordProfileEndpoint(config);
    this.AuthenticationSettings = new AuthenticationSettingsEndpoint(config);
    this.MerchantRealmMappings = new MerchantRealmMappings(config);
    this.Accounts = new AccountsEndpoint(config);
    this.AccountAuthenticationSettings = new AccountAuthenticationSettingsEndpoint(config);
    this.AccountMembers = new AccountMembersEndpoint(config);
    this.AccountMemberships = new AccountMembershipsEndpoint(config);
    this.UserAuthenticationPasswordProfile = new UserAuthenticationPasswordProfileEndpoint(config);
    this.Metrics = new MetricsEndpoint(config);
  } // Expose `Cart` class on Moltin class


  _createClass(Moltin, [{
    key: "Cart",
    value: function Cart() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.cartId;
      return !this.config.disableCart ? new CartEndpoint(this.request, id) : null;
    } // Expose `authenticate` function on the Moltin class

  }, {
    key: "Authenticate",
    value: function Authenticate() {
      return this.request.authenticate();
    }
  }]);

  return Moltin;
}(); // Export a function to instantiate the Moltin class

var gateway = function gateway(config) {
  return new Moltin(new Config(config));
};

export default Moltin;
export { gateway, MemoryStorageFactory, LocalStorageFactory };
