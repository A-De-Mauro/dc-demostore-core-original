import { Connection } from './Connection';
declare enum CONNECTION_STEPS {
    CONNECTION = "waiting for connection.",
    IFRAME_LOADING = "waiting for iframe to load.",
    INITIATION_FROM_CLIENT = "waiting for initiation from client."
}
/**
 * The parent side of the connection.
 */
export declare class ServerConnection extends Connection {
    protected frame: HTMLIFrameElement;
    private channel;
    protected connectionStep: CONNECTION_STEPS;
    /**
     *
     * @param frame The iframe target to setup the connection on.
     * @param options Connection configuration options.
     * @param options.timeout Default request timeout (ms). This will trigger a reject on a any request that takes longer than this value. 200ms by default.
     * @param options.connectionTimeout Connection timeout (ms). This will trigger the CONNECTION_TIMEOUT if a connection hasn't been established by this time.
     * @param options.debug Enabling uses console.log to output what MC is doing behind the scenes. Used for debugging. Disabled by default.
     * @param options.onload Uses the onload event of an iframe to trigger the process for creating a connection. If set to false the connection process needs to be triggered manually. Note a connection will only work if the child frame has loaded. Enabled by default.
     * @param options.targetOrigin Limits the iframe to send messages to only the specified origins. '*' by Default.
     * @param options.clientInitiates Awaits an postMessage (init) trigger from the child before it sets up and sends the MessageChannel port to the child. false by Default.
     */
    constructor(frame: HTMLIFrameElement, options?: any);
    private clientInitiation;
    private setupLoadInit;
    private setupClientInit;
    /**
     * Used to trigger the initiation of a connection manually. To be used if the onload, and clientInitiates options are disabled.
     */
    init(): false | undefined;
    private sendPortToClient;
    private listenForHandshake;
    private setupChannel;
}
export {};
