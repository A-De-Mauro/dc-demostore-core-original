"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Connection_1 = require("./Connection");
var CONNECTION_STEPS;
(function (CONNECTION_STEPS) {
    CONNECTION_STEPS["CONNECTION"] = "waiting for connection.";
    CONNECTION_STEPS["HANDSHAKE"] = "waiting for handshake.";
})(CONNECTION_STEPS || (CONNECTION_STEPS = {}));
/**
 * The child side of a connection.
 */
var ClientConnection = /** @class */ (function (_super) {
    __extends(ClientConnection, _super);
    function ClientConnection(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, options) || this;
        _this.messageListener = function (e) { return _this.messageHandler(e); };
        _this.options.window.addEventListener('message', _this.messageListener);
        if (_this.options.connectionTimeout !== false) {
            _this.connectionStep = CONNECTION_STEPS.CONNECTION;
            _this.setConnectionTimeout();
        }
        return _this;
    }
    ClientConnection.prototype.init = function () {
        var url = new URL(this.options.window.location.toString());
        this.id = url.searchParams.get('mc-name');
        if (this.options.debug) {
            console.log('Client: sent postMessage value:', this.id);
        }
        this.options.window.parent.postMessage(this.id, this.options.targetOrigin);
    };
    ClientConnection.prototype.messageHandler = function (e) {
        if (e.ports[0]) {
            this.port = e.ports[0];
            this.initPortEvents();
            this.listenForHandshake();
            this.options.window.removeEventListener('message', this.messageListener);
        }
    };
    ClientConnection.prototype.listenForHandshake = function () {
        var _this = this;
        if (this.options.connectionTimeout !== false) {
            this.connectionStep = CONNECTION_STEPS.HANDSHAKE;
            this.setConnectionTimeout();
        }
        this.request(Connection_1.MC_EVENTS.HANDSHAKE, null, { timeout: false })
            .then(function () {
            _this.addBeforeUnloadEvent();
            _this.finishInit();
        })
            .catch(function (e) {
            _this.handleError(e);
        });
    };
    ClientConnection.prototype.addBeforeUnloadEvent = function () {
        var _this = this;
        this.options.window.addEventListener('beforeunload', function (event) {
            _this.emit(Connection_1.MC_EVENTS.DISCONNECTED);
            _this.close();
        });
    };
    ClientConnection.prototype.isClient = function () {
        return true;
    };
    return ClientConnection;
}(Connection_1.Connection));
exports.ClientConnection = ClientConnection;
//# sourceMappingURL=ClientConnection.js.map