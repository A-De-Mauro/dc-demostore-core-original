"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The set of possible message types.
 */
var MESSAGE_TYPE;
(function (MESSAGE_TYPE) {
    MESSAGE_TYPE["SUBSCRIBE"] = "subscribe";
    MESSAGE_TYPE["EMIT"] = "emit";
    MESSAGE_TYPE["REQUEST"] = "request";
    MESSAGE_TYPE["RESOLVE"] = "resolve";
    MESSAGE_TYPE["REJECT"] = "reject";
})(MESSAGE_TYPE = exports.MESSAGE_TYPE || (exports.MESSAGE_TYPE = {}));
/**
 * The set of internally used event triggers that can be bound to.
 */
var MC_EVENTS;
(function (MC_EVENTS) {
    MC_EVENTS["HANDSHAKE"] = "mc-handshake";
    MC_EVENTS["CONNECTED"] = "mc-connected";
    MC_EVENTS["DISCONNECTED"] = "mc-disconnected";
    MC_EVENTS["CONNECTION_TIMEOUT"] = "mc-connection-timeout";
})(MC_EVENTS = exports.MC_EVENTS || (exports.MC_EVENTS = {}));
/**
 * Connection Base Class.
 *
 * It is used to provide the shared functionality of [[ServerConnection]] and [[ClientConnection]]
 *
 */
var Connection = /** @class */ (function () {
    /**
     * Creates a Connection instance.
     * @param options Connection configuration options
     * @param options.timeout Default request timeout (ms). This will trigger a reject on a any request that takes longer than this value. 200ms by default.
     * @param options.connectionTimeout Connection timeout (ms). This will trigger the CONNECTION_TIMEOUT if a connection hasn't been established by this time.
     * @param options.debug Enabling uses console.log to output what MC is doing behind the scenes. Used for debugging. Disabled by default.
     * @param options.onload Uses the onload event of an iframe to trigger the process for creating a connection. If set to false the connection process needs to be triggered manually. Note a connection will only work if the child frame has loaded. Enabled by default.
     * @param options.targetOrigin Limits the iframe to send messages to only the specified origins. '*' by Default.
     * @param options.clientInitiates Awaits an postMessage (init) trigger from the child before it sets up and sends the MessageChannel port to the child. false by Default.
     */
    function Connection(options) {
        if (options === void 0) { options = {}; }
        /**
         * Indicates if a connection has been established
         */
        this.connected = false;
        this.backlog = [];
        this.promises = {};
        this.emitters = {};
        this.connectionStep = '';
        this.defaultOptions = {
            window: window,
            connectionTimeout: 2000,
            timeout: 200,
            debug: false,
            onload: true,
            clientInitiates: false,
            targetOrigin: '*'
        };
        this.options = __assign({}, this.defaultOptions, options);
    }
    /**
     * This method will emit an event to its counterpart.
     * @param event The name of the event to emit.
     * @param payload Payload to be sent with the event.
     * @return Returns Connection instance.
     */
    Connection.prototype.emit = function (event, payload) {
        this.message({
            type: MESSAGE_TYPE.EMIT,
            event: event,
            payload: payload
        });
        return this;
    };
    /**
     * Bind a callback to an event.
     * @param event The name of the event to listen for.
     * @param callback The function to call when the event is fired.
     * @return Returns Connection instance.
     */
    Connection.prototype.on = function (event, callback) {
        if (this.emitters[event] && Array.isArray(this.emitters[event])) {
            this.emitters[event].push(callback);
        }
        else {
            this.emitters[event] = [callback];
        }
        return this;
    };
    /**
     * Make a request of the counterpart. It will automatically reject the promise if the timeout time is exceeded.
     * @param event The name of the event to emit
     * @param payload Payload to be sent with the request
     * @param options
     * @param options.timeout Override for the default promise timeout, can be an interger or false
     * @returns A promise that can resolve with any payload
     */
    Connection.prototype.request = function (event, payload, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return new Promise(function (resolve, reject) {
            var uuid = _this.uuidv4();
            var timeout = _this.getRequestTimeout(options.timeout);
            var ct;
            if (timeout !== false && typeof timeout === 'number') {
                ct = window.setTimeout(function () { return reject('timeout'); }, timeout);
            }
            _this.promises[uuid] = {
                resolve: function (resolvedData) {
                    resolve(resolvedData);
                    if (ct) {
                        clearTimeout(ct);
                    }
                },
                reject: function (error) {
                    reject(error);
                    if (ct) {
                        clearTimeout(ct);
                    }
                }
            };
            _this.message({
                type: MESSAGE_TYPE.REQUEST,
                event: event,
                id: uuid,
                payload: payload
            });
        });
    };
    /**
     * Close the port being used to communicate. It will prevent any further messages being sent or received.
     */
    Connection.prototype.close = function () {
        if (this.connected) {
            this.port.close();
            this.connected = false;
        }
        if (this.messageListener) {
            this.options.window.removeEventListener('message', this.messageListener, false);
        }
    };
    Connection.prototype.setConnectionTimeout = function () {
        var _this = this;
        clearTimeout(this.connectionTimeout);
        if (this.options.connectionTimeout !== false) {
            this.connectionTimeout = window.setTimeout(function () {
                if (_this.messageListener) {
                    _this.options.window.removeEventListener('message', _this.messageListener, false);
                }
                _this.handleMessage({
                    type: MESSAGE_TYPE.EMIT,
                    event: MC_EVENTS.CONNECTION_TIMEOUT,
                    payload: { message: 'Connection timed out while ' + _this.connectionStep }
                });
            }, Number(this.options.connectionTimeout));
        }
    };
    Connection.prototype.uuidv4 = function () {
        var crypt = window.crypto || window.msCrypto;
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
            return (c ^ (crypt.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16);
        });
    };
    Connection.prototype.clearConnectionTimeout = function () {
        clearTimeout(this.connectionTimeout);
    };
    Connection.prototype.initPortEvents = function () {
        var _this = this;
        this.port.onmessage = function (message) {
            _this.handleMessage(message.data);
        };
        this.port.onmessageerror = function (error) {
            _this.handleError(error);
        };
    };
    Connection.prototype.finishInit = function () {
        this.connected = true;
        this.clearConnectionTimeout();
        if (this.options.debug) {
            console.log("Finished connection on " + (this.isClient() ? 'client' : 'server'));
        }
        this.emit(MC_EVENTS.CONNECTED);
        this.completeBacklog();
    };
    Connection.prototype.completeBacklog = function () {
        var _this = this;
        this.backlog.forEach(function (message) {
            _this.portMessage(message);
        });
        this.backlog = [];
    };
    Connection.prototype.handleError = function (error) {
        if (this.options.debug) {
            console.error(error);
        }
    };
    Connection.prototype.handleMessage = function (message) {
        var _this = this;
        if (this.options.debug) {
            console.log("handle by " + (this.isClient() ? 'client' : 'server') + " - [" + message.type + "] \"" + message.event + "\", payload: ", message.payload);
        }
        switch (message.type) {
            case MESSAGE_TYPE.EMIT:
                if (!this.emitters[message.event] || !Array.isArray(this.emitters[message.event])) {
                    return;
                }
                this.emitters[message.event].forEach(function (cb) { return cb(message.payload); });
                break;
            case MESSAGE_TYPE.REQUEST:
                if (!this.emitters[message.event] || !Array.isArray(this.emitters[message.event])) {
                    return;
                }
                this.emitters[message.event].forEach(function (cb) {
                    return cb(message.payload, function (payload) {
                        _this.message({
                            id: message.id,
                            type: MESSAGE_TYPE.RESOLVE,
                            event: message.event,
                            payload: payload
                        });
                    }, function (payload) {
                        _this.message({
                            id: message.id,
                            type: MESSAGE_TYPE.REJECT,
                            event: message.event,
                            payload: payload
                        });
                    });
                });
                break;
            case MESSAGE_TYPE.RESOLVE:
                if (!this.promises[message.id]) {
                    return;
                }
                this.promises[message.id].resolve(message.payload);
                delete this.promises[message.id];
                break;
            case MESSAGE_TYPE.REJECT:
                if (!this.promises[message.id]) {
                    return;
                }
                this.promises[message.id].reject(message.payload);
                delete this.promises[message.id];
                break;
        }
    };
    Connection.prototype.getRequestTimeout = function (timeout) {
        if (typeof timeout === 'number' && timeout >= 0) {
            return timeout;
        }
        else if (typeof timeout === 'number') {
            return 0;
        }
        else if (timeout === true) {
            return this.options.timeout;
        }
        else if (timeout === false) {
            return false;
        }
        else {
            return this.options.timeout;
        }
    };
    Connection.prototype.isClient = function () {
        return false;
    };
    Connection.prototype.message = function (message) {
        var force = false;
        if (message.event === MC_EVENTS.HANDSHAKE ||
            message.event === MC_EVENTS.CONNECTED ||
            message.event === MC_EVENTS.DISCONNECTED) {
            force = true;
        }
        if (!this.connected && !force) {
            this.backlog.push(message);
        }
        else if (this.port) {
            this.portMessage(message);
        }
    };
    Connection.prototype.portMessage = function (message) {
        if (this.options.debug) {
            console.log("send from " + (this.isClient() ? 'client' : 'server') + " - [" + message.type + "] \"" + message.event + "\", payload: ", message.payload);
        }
        this.port.postMessage(message);
    };
    return Connection;
}());
exports.Connection = Connection;
//# sourceMappingURL=Connection.js.map