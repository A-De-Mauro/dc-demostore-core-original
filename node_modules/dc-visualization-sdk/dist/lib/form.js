"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = exports.FORM_EVENTS = exports.KEY = void 0;
var handler_container_1 = require("./handler-container");
var request_config_1 = require("./request-config");
exports.KEY = 'visualization-sdk:dc-form';
var FORM_EVENTS;
(function (FORM_EVENTS) {
    FORM_EVENTS["GET"] = "visualization-sdk:form:get";
    FORM_EVENTS["CHANGE"] = "visualization-sdk:form:change";
    FORM_EVENTS["SAVED"] = "visualization-sdk:form:saved";
    FORM_EVENTS["CHANGED_CONFIG"] = "visualization-sdk:form:changed-config";
    FORM_EVENTS["SAVED_CONFIG"] = "visualization-sdk:form:saved-config";
})(FORM_EVENTS = exports.FORM_EVENTS || (exports.FORM_EVENTS = {}));
/**
 * Form class allows you to watch for changes within the content form, it is not enabled for other contexts such as SnapshotBrowser or Edition page ect.
 */
var Form = /** @class */ (function () {
    function Form(connection) {
        var _this = this;
        this.connection = connection;
        var handlerContainer = handler_container_1.HandlerContainerFactory(connection);
        this.changeHandlerContainer = handlerContainer(FORM_EVENTS.CHANGED_CONFIG);
        this.savedHandlerContainer = handlerContainer(FORM_EVENTS.SAVED_CONFIG);
        this.connection.on(FORM_EVENTS.CHANGE, function (_a) {
            var model = _a.model, handlerId = _a.handlerId;
            _this.changeHandlerContainer.run(model, handlerId);
        });
        this.connection.on(FORM_EVENTS.SAVED, function (_a) {
            var model = _a.model, handlerId = _a.handlerId;
            _this.savedHandlerContainer.run(model, handlerId);
        });
    }
    /**
     * Get the current model state of all the fields in the form in Delivery Format.
     *
     * @param config - Config for how the model should be returned e.g CDv2 or CDv1
     *
     * ### Example
     * ```typescript
     * try {
     *   const value = await visualization.form.get();
     *
     *   console.log(value)
     * } catch (e) {
     *   // In a context where there is no form model
     * }
     * ```
     */
    Form.prototype.get = function (config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _config, model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _config = new request_config_1.RequestConfigContainer(config).config;
                        return [4 /*yield*/, this.connection.request(FORM_EVENTS.GET, _config)];
                    case 1:
                        model = _a.sent();
                        return [2 /*return*/, model];
                }
            });
        });
    };
    /**
     * Sets up a listener for when the form saves
     *
     * @param cb - callback function to be called when form has saved
     * @param config - Config for how the model should be returned e.g CDv2 or CDv1
     *
     * @returns a dispose function which removes the listener
     *
     * ### Example
     *
     * ```typescript
     *  const dispose = visualization.form.saved((model) => {
     *    // handle form saved
     *  })
     * ```
     */
    Form.prototype.saved = function (cb, config) {
        if (config === void 0) { config = {}; }
        var _config = new request_config_1.RequestConfigContainer(config).config;
        return this.savedHandlerContainer.add(cb, _config);
    };
    /**
     * Sets up a listener for when the form changes
     *
     * @param cb - callback function to be called when form has changed
     * @param config - Config for how the model should be returned e.g CDv2 or CDv1
     *
     * @returns a dispose function which removes the listener
     *
     * ### Example
     *
     * ```typescript
     *  const dispose = visualization.form.changed((model) => {
     *    // handle form change
     *  })
     * ```
     */
    Form.prototype.changed = function (cb, config) {
        if (config === void 0) { config = {}; }
        var _config = new request_config_1.RequestConfigContainer(config).config;
        return this.changeHandlerContainer.add(cb, _config);
    };
    return Form;
}());
exports.Form = Form;
//# sourceMappingURL=form.js.map