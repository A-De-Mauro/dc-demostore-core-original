"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Locale = exports.LOCALE_EVENTS = exports.KEY = void 0;
var handler_container_1 = require("./handler-container");
exports.KEY = 'visualization-sdk:locale';
var LOCALE_EVENTS;
(function (LOCALE_EVENTS) {
    LOCALE_EVENTS["GET"] = "visualization-sdk:locale:get";
    LOCALE_EVENTS["CHANGE"] = "visualization-sdk:locale:change";
})(LOCALE_EVENTS = exports.LOCALE_EVENTS || (exports.LOCALE_EVENTS = {}));
/**
 * Locale class allows you to get the currently selected locale in the form and watch for changes to asynchronously update your application
 */
var Locale = /** @class */ (function () {
    function Locale(connection) {
        var _this = this;
        this.connection = connection;
        var handlerContainer = handler_container_1.HandlerContainerFactory(connection);
        this.changeHandlerContainer = handlerContainer();
        this.connection.on(LOCALE_EVENTS.CHANGE, function (locale) {
            _this.changeHandlerContainer.run(locale);
        });
    }
    /**
     * Get the current locale selected in visualization settings
     *
     * ### Example
     *
     * ```typescript
     * const value = await visualization.locale.get();
     *
     * console.log(value)
     * ```
     */
    Locale.prototype.get = function () {
        return this.connection.request(LOCALE_EVENTS.GET);
    };
    /**
     * Sets up a listener for when the visualization locale changes.
     *
     * @param cb - callback function to be called when the visualization locale changes.
     *
     * @returns a dispose function which removes the listener
     *
     * ### Example
     *
     * ```typescript
     *  const dispose = visualization.locale.changed((model) => {
     *    // handle locale change
     *  })
     * ```
     */
    Locale.prototype.changed = function (cb) {
        return this.changeHandlerContainer.add(cb);
    };
    return Locale;
}());
exports.Locale = Locale;
//# sourceMappingURL=locale.js.map