"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = exports.DEVICE_EVENTS = exports.KEY = void 0;
var handler_container_1 = require("./handler-container");
exports.KEY = 'visualization-sdk:device';
var DEVICE_EVENTS;
(function (DEVICE_EVENTS) {
    DEVICE_EVENTS["GET"] = "visualization-sdk:device:get";
    DEVICE_EVENTS["CHANGE"] = "visualization-sdk:device:change";
})(DEVICE_EVENTS = exports.DEVICE_EVENTS || (exports.DEVICE_EVENTS = {}));
/**
 * Device class allows you to get the currently selected device in the form and watch for changes to asynchronously update your application
 */
var Device = /** @class */ (function () {
    function Device(connection) {
        var _this = this;
        this.connection = connection;
        var handlerContainer = handler_container_1.HandlerContainerFactory(connection);
        this.changeHandlerContainer = handlerContainer();
        this.connection.on(DEVICE_EVENTS.CHANGE, function (device) {
            _this.changeHandlerContainer.run(device);
        });
    }
    /**
     * Get the current device selected
     *
     * ### Example
     *
     * ```typescript
     * const value = await visualization.device.get();
     *
     * console.log(value)
     * ```
     */
    Device.prototype.get = function () {
        return this.connection.request(DEVICE_EVENTS.GET);
    };
    /**
     * Sets up a listener for when the visualization device changes.
     *
     * @param cb - callback function to be called when the visualization device changes.
     *
     * @returns a dispose function which removes the listener
     *
     * ### Example
     *
     * ```typescript
     *  const dispose = visualization.device.changed((model) => {
     *    // handle device change
     *  })
     * ```
     */
    Device.prototype.changed = function (cb) {
        return this.changeHandlerContainer.add(cb);
    };
    return Device;
}());
exports.Device = Device;
//# sourceMappingURL=device.js.map