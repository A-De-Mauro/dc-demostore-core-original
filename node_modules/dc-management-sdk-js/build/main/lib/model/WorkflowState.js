"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowStatesPage = exports.WorkflowState = void 0;
var HalResource_1 = require("../hal/models/HalResource");
var Hub_1 = require("./Hub");
var Page_1 = require("./Page");
/**
 * Class representing the [WorkflowState](https://amplience.com/docs/api/dynamic-content/management/#tag/Workflows) resource.
 *
 * It is possible to define a list of workflow states on a hub which will allow users to implement one or more rudimentary workflows. Each content item within the hub can have its status set to one of the workflow states defined within the hub.
 *
 * In the interest of flexibility, the transitions between states are not validated. In other words, it is possible to transition a content item from any state into any other state.
 */
var WorkflowState = /** @class */ (function (_super) {
    __extends(WorkflowState, _super);
    function WorkflowState() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Resources and actions related to a WorkflowState
         */
        _this.related = {
            /**
             * Retrieves the Hub this webhook is stored in
             */
            hub: function () { return _this.fetchLinkedResource('hub', {}, Hub_1.Hub); },
            /**
             * Updates this Workflow State with the changes in the mutation parameter.
             * @param mutation
             */
            update: function (mutation) {
                return _this.updateResource(mutation, WorkflowState);
            },
        };
        return _this;
    }
    return WorkflowState;
}(HalResource_1.HalResource));
exports.WorkflowState = WorkflowState;
/**
 * @hidden
 */
var WorkflowStatesPage = /** @class */ (function (_super) {
    __extends(WorkflowStatesPage, _super);
    function WorkflowStatesPage(data) {
        return _super.call(this, 'workflow-states', WorkflowState, data) || this;
    }
    return WorkflowStatesPage;
}(Page_1.Page));
exports.WorkflowStatesPage = WorkflowStatesPage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV29ya2Zsb3dTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvbW9kZWwvV29ya2Zsb3dTdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseURBQXdEO0FBQ3hELDZCQUE0QjtBQUM1QiwrQkFBOEI7QUFFOUI7Ozs7OztHQU1HO0FBQ0g7SUFBbUMsaUNBQVc7SUFBOUM7UUFBQSxxRUFvREM7UUFoQkM7O1dBRUc7UUFDYSxhQUFPLEdBQUc7WUFDeEI7O2VBRUc7WUFDSCxHQUFHLEVBQUUsY0FBb0IsT0FBQSxLQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxTQUFHLENBQUMsRUFBeEMsQ0FBd0M7WUFFakU7OztlQUdHO1lBQ0gsTUFBTSxFQUFFLFVBQUMsUUFBdUI7Z0JBQzlCLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDO1lBQTVDLENBQTRDO1NBQy9DLENBQUM7O0lBQ0osQ0FBQztJQUFELG9CQUFDO0FBQUQsQ0FBQyxBQXBERCxDQUFtQyx5QkFBVyxHQW9EN0M7QUFwRFksc0NBQWE7QUFzRDFCOztHQUVHO0FBQ0g7SUFBd0Msc0NBQW1CO0lBQ3pELDRCQUFZLElBQThCO2VBQ3hDLGtCQUFNLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUM7SUFDL0MsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQUpELENBQXdDLFdBQUksR0FJM0M7QUFKWSxnREFBa0IifQ==