"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HalMocks = exports.HalMockResource = void 0;
var CURIEs_1 = require("../services/CURIEs");
/**
 * @hidden
 */
var HalMockResource = /** @class */ (function () {
    function HalMockResource(resource, mocks) {
        this.resource = resource;
        this.mocks = mocks;
    }
    HalMockResource.prototype.nestedResource = function (linkName, args, resource) {
        var link = this.resource._links[linkName];
        var href = CURIEs_1.CURIEs.expand(link.href, args);
        this.mocks.resource(resource, href);
        return this;
    };
    HalMockResource.prototype.nestedCollection = function (linkName, args, type, values) {
        var link = this.resource._links[linkName];
        var href = CURIEs_1.CURIEs.expand(link.href, args);
        this.mocks.collection(href, type, values);
        return this;
    };
    HalMockResource.prototype.nestedCreateResource = function (linkName, args, resource, errorCode) {
        if (errorCode === void 0) { errorCode = 200; }
        var link = this.resource._links[linkName];
        var href = CURIEs_1.CURIEs.expand(link.href, args);
        this.mocks.createResource(href, resource, errorCode);
        return this;
    };
    HalMockResource.prototype.nestedPutResource = function (linkName, args, resource) {
        var link = this.resource._links[linkName];
        var href = CURIEs_1.CURIEs.expand(link.href, args);
        this.mocks.putResource(href, resource);
        return this;
    };
    HalMockResource.prototype.nestedUpdateResource = function (linkName, args, resource) {
        var link = this.resource._links[linkName];
        var href = CURIEs_1.CURIEs.expand(link.href, args);
        this.mocks.updateResource(href, resource);
        return this;
    };
    HalMockResource.prototype.nestedDelete = function (linkName, args) {
        var link = this.resource._links[linkName];
        var href = CURIEs_1.CURIEs.expand(link.href, args);
        this.mocks.deleteResource(href);
        return this;
    };
    return HalMockResource;
}());
exports.HalMockResource = HalMockResource;
/**
 * @hidden
 */
var HalMocks = /** @class */ (function () {
    function HalMocks(mockInstance) {
        this.mockInstance = mockInstance;
    }
    HalMocks.prototype.resource = function (resource, url) {
        if (!url) {
            url = resource._links.self.href;
        }
        this.mockInstance.onGet(url).reply(200, resource);
        if (resource._links.delete) {
            this.mockInstance.onDelete(resource._links.delete.href).reply(204);
        }
        return new HalMockResource(resource, this);
    };
    HalMocks.prototype.collection = function (url, type, values) {
        var _a;
        this.mockInstance.onGet(url).reply(200, {
            _embedded: (_a = {},
                _a[type] = values,
                _a),
        });
    };
    HalMocks.prototype.createResource = function (url, resource, errorCode) {
        if (errorCode === void 0) { errorCode = 200; }
        this.mockInstance.onPost(url).reply(errorCode, resource);
        return new HalMockResource(resource, this);
    };
    HalMocks.prototype.putResource = function (url, resource) {
        this.mockInstance.onPut(url).reply(200, resource);
        return new HalMockResource(resource, this);
    };
    HalMocks.prototype.updateResource = function (url, resource) {
        this.mockInstance.onPatch(url).reply(200, resource);
        return new HalMockResource(resource, this);
    };
    HalMocks.prototype.deleteResource = function (url) {
        this.mockInstance.onDelete(url).reply(200);
    };
    HalMocks.prototype.postResource = function (url) {
        this.mockInstance.onPost(url).reply(204);
    };
    return HalMocks;
}());
exports.HalMocks = HalMocks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFsTW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvaGFsL3V0aWxzL0hhbE1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsNkNBQTRDO0FBVzVDOztHQUVHO0FBQ0g7SUFDRSx5QkFDa0IsUUFBb0IsRUFDcEIsS0FBZTtRQURmLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDcEIsVUFBSyxHQUFMLEtBQUssQ0FBVTtJQUM5QixDQUFDO0lBRUcsd0NBQWMsR0FBckIsVUFDRSxRQUFnQixFQUNoQixJQUFTLEVBQ1QsUUFBb0I7UUFFcEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsSUFBTSxJQUFJLEdBQUcsZUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSwwQ0FBZ0IsR0FBdkIsVUFDRSxRQUFnQixFQUNoQixJQUFTLEVBQ1QsSUFBWSxFQUNaLE1BQVc7UUFFWCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxJQUFNLElBQUksR0FBRyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSw4Q0FBb0IsR0FBM0IsVUFDRSxRQUFnQixFQUNoQixJQUFTLEVBQ1QsUUFBb0IsRUFDcEIsU0FB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