import { JsonTree } from '../../utils/JsonTree';
import { ContentLink } from '../models/ContentLink';
/**
 * Utility to assist parsing and generating Content Item graphs.
 */
export class ContentGraph {
    /**
     * Extract content-link references from the body of a Content Item
     * @param content
     * @returns {IContentLink[]}
     */
    static extractLinks(content) {
        const result = new Array();
        JsonTree.visit(content, (value) => {
            if (ContentLink.isContentLink(value)) {
                result.push(value);
            }
        });
        return result;
    }
    /**
     * Utility to help deeply copy a content graph. Each content item and its dependencies
     * are visited using the contentItemProvider function to load the source item. The
     * contentItemPicker is invoked for every Content Item giving your application an opportunity
     * to either save the item to a new location (copy) or return the original (reference).
     *
     * The JSON body provided to the contentItemPicker function will have had any Content Links
     * remapped to the newly saved Content Item.
     *
     * ```typescript
     * const targetRepository = await client.contentRepositories.get('5b32377b4cedfd01c4503691');
     * const contentIds = ['a87fd535-fb25-44ee-b687-0db72bbab721'];
     *
     * const idMap = await ContentGraph.deepCopy(
     *  contentIds,
     *  client.contentItems.get,
     *  function(item:ContentItem, body:any) {
     *      return targetRepository.related.contentItems.create(new ContentItem({
     *        label: item.label,
     *        body: body
     *      }));
     *    }
     * );
     * ```
     *
     * @param ids Ids of the root content items to copy
     * @param contentItemProvider Function that loads content items by id
     * @param contentItemPicker Function that creates or returns an existing content item that should be used in place of the original
     * @returns {Promise<any>} Mapping of old content item ids to the newly created ids
     */
    static async deepCopy(ids, contentItemProvider, contentItemPicker) {
        const cache = {};
        const mapping = {};
        const processItem = (id) => {
            if (cache[id]) {
                return cache[id];
            }
            else {
                return (cache[id] = contentItemProvider(id)
                    .then((item) => {
                    // visit children
                    const links = ContentGraph.extractLinks(item.body);
                    return Promise.all(links.map((link) => processItem(link.id))).then(() => item);
                })
                    .then((item) => {
                    // Rewrite the body so that linked items point to the id of the copy
                    const body = JSON.parse(JSON.stringify(item.body));
                    const links = ContentGraph.extractLinks(body);
                    for (const link of links) {
                        link.id = mapping[link.id];
                    }
                    // Let the application choose how to copy the item
                    const newItem = contentItemPicker(item, body);
                    newItem.then((newItemValue) => {
                        mapping[item.id] = newItemValue.id;
                    });
                    return newItem;
                }));
            }
        };
        await Promise.all(ids.map((id) => processItem(id)));
        return mapping;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGVudEdyYXBoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb250ZW50L3NlcnZpY2VzL0NvbnRlbnRHcmFwaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBdUIsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RTs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFZO0lBQ3ZCOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQVk7UUFDckMsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQXVCLENBQUM7UUFDaEQsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNyQyxJQUFJLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBNEIsQ0FBQyxDQUFDO2FBQzNDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BNkJHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQzFCLEdBQWEsRUFDYixtQkFBeUQsRUFDekQsaUJBR3lCO1FBRXpCLE1BQU0sS0FBSyxHQUFRLEVBQUUsQ0FBQztRQUN0QixNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFFeEIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFVLEVBQXdCLEVBQUU7WUFDdkQsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ2IsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLENBQUM7cUJBQ3hDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO29CQUNiLGlCQUFpQjtvQkFDakIsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ25ELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2hFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FDWCxDQUFDO2dCQUNKLENBQUMsQ0FBQztxQkFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtvQkFDYixvRUFBb0U7b0JBQ3BFLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDeEQsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDOUMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7d0JBQ3hCLElBQUksQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDNUI7b0JBRUQsa0RBQWtEO29CQUNsRCxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzlDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTt3QkFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDO29CQUNyQyxDQUFDLENBQUMsQ0FBQztvQkFDSCxPQUFPLE9BQU8sQ0FBQztnQkFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNQO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGIn0=