import { HttpError } from '../../http/HttpError';
import { HttpMethod } from '../../http/HttpRequest';
import { combineURLs } from '../../utils/URL';
import { CURIEs } from './CURIEs';
/**
 * @hidden
 */
export class DefaultHalClient {
    constructor(baseUrl, httpClient, tokenProvider) {
        this.baseUrl = baseUrl;
        this.httpClient = httpClient;
        this.tokenProvider = tokenProvider;
    }
    async fetchLinkedResource(link, params, resourceConstructor) {
        let href = link.href;
        if (link.templated) {
            href = CURIEs.expand(href, params);
        }
        return this.fetchResource(href, resourceConstructor);
    }
    async fetchResource(path, resourceConstructor) {
        const response = await this.invoke({
            method: HttpMethod.GET,
            url: path,
        });
        return this.parse(response.data, resourceConstructor);
    }
    async createLinkedResource(link, params, resource, resourceConstructor) {
        let href = link.href;
        if (link.templated) {
            href = CURIEs.expand(href, params);
        }
        return this.createResource(href, resource, resourceConstructor);
    }
    async createResource(path, resource, resourceConstructor) {
        const response = await this.invoke({
            data: this.serialize(resource),
            method: HttpMethod.POST,
            url: path,
        });
        return this.parse(response.data, resourceConstructor);
    }
    async updateResource(path, resource, resourceConstructor) {
        const response = await this.invoke({
            data: this.serialize(resource),
            method: HttpMethod.PATCH,
            url: path,
        });
        return this.parse(response.data, resourceConstructor);
    }
    async updateLinkedResource(link, params, resource, resourceConstructor) {
        let href = link.href;
        if (link.templated) {
            href = CURIEs.expand(href, params);
        }
        return this.updateResource(href, resource, resourceConstructor);
    }
    async deleteLinkedResource(link, params) {
        let href = link.href;
        if (link.templated) {
            href = CURIEs.expand(href, params);
        }
        return this.deleteResource(href);
    }
    async deleteResource(path) {
        await this.invoke({
            method: HttpMethod.DELETE,
            url: path,
        });
        return Promise.resolve();
    }
    async performActionWithoutResourceResponse(link, params, data, method = HttpMethod.POST) {
        let href = link.href;
        if (link.templated) {
            href = CURIEs.expand(href, params);
        }
        await this.invoke({
            data: this.serialize(data),
            method,
            url: href,
        });
        return Promise.resolve();
    }
    async performActionThatReturnsResource(link, params, data, resourceConstructor, method = HttpMethod.POST) {
        let href = link.href;
        if (link.templated) {
            href = CURIEs.expand(href, params);
        }
        const response = await this.invoke({
            data: this.serialize(data),
            method,
            url: href,
        });
        return this.parse(response.data, resourceConstructor);
    }
    parse(data, resourceConstructor) {
        const instance = new resourceConstructor(data);
        instance.setClient(this);
        return instance;
    }
    serialize(data) {
        return JSON.parse(JSON.stringify(data));
    }
    async invoke(request) {
        const token = await this.tokenProvider.getToken();
        const fullRequest = {
            data: request.data,
            headers: {
                Authorization: 'bearer ' + token.access_token,
            },
            method: request.method,
            url: combineURLs(this.baseUrl, request.url),
        };
        return this.httpClient.request(fullRequest).then((response) => {
            if (response.status === 204) {
                return response;
            }
            if (response.status >= 200 && response.status < 300) {
                if (typeof response.data === 'string') {
                    response.data = JSON.parse(response.data);
                }
                return response;
            }
            else {
                throw new HttpError(`Request failed with status code ${response.status}: ${JSON.stringify(response.data)}`, fullRequest, response);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFsQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9oYWwvc2VydmljZXMvSGFsQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sd0JBQXdCLENBQUM7QUFHakUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFzRWxDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUNVLE9BQWUsRUFDZixVQUFzQixFQUN0QixhQUFrQztRQUZsQyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixrQkFBYSxHQUFiLGFBQWEsQ0FBcUI7SUFDekMsQ0FBQztJQUVHLEtBQUssQ0FBQyxtQkFBbUIsQ0FDOUIsSUFBYSxFQUNiLE1BQVcsRUFDWCxtQkFBOEM7UUFFOUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUN4QixJQUFZLEVBQ1osbUJBQThDO1FBRTlDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNqQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUc7WUFDdEIsR0FBRyxFQUFFLElBQUk7U0FDVixDQUFDLENBQUM7UUFDSCxPQUFPLElB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