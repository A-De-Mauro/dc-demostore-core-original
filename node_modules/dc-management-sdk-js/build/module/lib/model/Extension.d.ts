import { HalResource } from '../hal/models/HalResource';
import { Hub } from './Hub';
import { Page } from './Page';
import { Status } from './Status';
/**
 * Extension snippet
 */
export interface ExtensionSnippet {
    /**
     * User friendly name of the snippet
     */
    label?: string;
    /**
     * JSON body of the snippet
     */
    body?: string;
}
/**
 * Class representing the [Extension](https://amplience.com/docs/api/dynamic-content/management/#tag/Extensions) resource.
 */
export declare class Extension extends HalResource {
    /**
     * Id of the extension
     */
    id?: string;
    /**
     * Id of the associated hub
     */
    hubId?: string;
    /**
     * System name of the extension
     */
    name: string;
    /**
     * User friendly name of the extension
     */
    label: string;
    /**
     * Description for the extension
     */
    description?: string;
    /**
     * Base url for the extension
     */
    url: string;
    /**
     * Height of the extension
     */
    height?: number;
    /**
     * Category of the extension
     */
    category: 'CONTENT_FIELD' | 'DASHBOARD';
    /**
     * JSON config parameters of the extension
     */
    parameters?: string;
    /**
     * Array of snippets
     */
    snippets?: ExtensionSnippet[];
    /**
     * Settings of the extension, as a JSON string
     */
    settings?: string;
    /**
     * Status of the extension
     */
    status: Status;
    /**
     * User who created the Extension
     */
    createdBy: string;
    /**
     * Created date of the extension
     */
    createdDate: string;
    /**
     * User who last changed the Extension
     */
    lastModifiedBy: string;
    /**
     * Last modified date of the extension
     */
    lastModifiedDate: string;
    /**
     * Resources and actions related to an Extension
     */
    readonly related: {
        /**
         * Updates this extension with the changes in the mutation parameter.
         */
        update: (mutation: Extension) => Promise<Extension>;
        /**
         * Retrieves the Hub this extension is stored in
         */
        hub: () => Promise<Hub>;
        /**
         * Deletes this extension.
         */
        delete: () => Promise<void>;
    };
}
/**
 * @hidden
 */
export declare class ExtensionsPage extends Page<Extension> {
    constructor(data?: any);
}
