import { AxiosRequestConfig } from 'axios';
import { DynamicContent, DynamicContentConfig } from './DynamicContent';
import { HalClient } from './hal/services/HalClient';
import { HttpClient } from './http/HttpClient';
import { AccessTokenProvider } from './oauth2/models/AccessTokenProvider';
import { OAuth2ClientCredentials } from './oauth2/models/OAuth2ClientCredentials';
/**
 * @hidden
 */
export declare const HUB: {
    id: string;
    name: string;
    label: string;
    description: string;
    status: string;
    settings: {
        virtualStagingEnvironment: {
            hostname: string;
        };
        previewVirtualStagingEnvironment: {
            hostname: string;
        };
        applications: any[];
        devices: {
            name: string;
            width: number;
            height: number;
            orientate: boolean;
        }[];
        publishing: {
            platforms: {
                amplience_dam: {
                    API_KEY: string;
                    endpoint: string;
                };
            };
        };
    };
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        snapshots: {
            href: string;
            templated: boolean;
        };
        'create-snapshot': {
            href: string;
        };
        events: {
            href: string;
            templated: boolean;
        };
        'create-event': {
            href: string;
        };
        extensions: {
            href: string;
            templated: boolean;
        };
        'extensions-lite': {
            href: string;
            templated: boolean;
        };
        'extension-by-name': {
            href: string;
            templated: boolean;
        };
        'create-extension': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        'update-settings': {
            href: string;
        };
        share: {
            href: string;
        };
        'content-repositories': {
            href: string;
            templated: boolean;
        };
        'create-content-repository': {
            href: string;
        };
        'register-content-type': {
            href: string;
        };
        'content-types': {
            href: string;
            templated: boolean;
        };
        'list-content-type-schemas': {
            href: string;
            templated: boolean;
        };
        'create-content-type-schema': {
            href: string;
        };
        'search-content-items': {
            href: string;
            templated: boolean;
        };
        'facet-content-items': {
            href: string;
            templated: boolean;
        };
        webhooks: {
            href: string;
            templated: boolean;
        };
        'create-webhook': {
            href: string;
        };
        'algolia-search-indexes': {
            href: string;
            templated: boolean;
        };
        'create-algolia-search-index': {
            href: string;
        };
        'workflow-states': {
            href: string;
            templated: boolean;
        };
        'create-workflow-state': {
            href: string;
        };
        'batch-create-snapshots': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_ITEM: {
    id: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
        };
    };
    version: number;
    label: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    deliveryId: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
        publish: {
            href: string;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        delete: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        localizations: {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        folder: {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_ITEM_V2: {
    id: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
        };
    };
    version: number;
    label: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    deliveryId: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
        publish: {
            href: string;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        delete: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        localizations: {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        folder: {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_ITEM_WITH_LOCALE: {
    id: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
        };
    };
    version: number;
    label: string;
    status: string;
    locale: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    deliveryId: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
        publish: {
            href: string;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        delete: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        folder: {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'create-localizations': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_ITEM_WITH_ASSIGNEE: {
    id: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
        };
    };
    version: number;
    label: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    deliveryId: string;
    assignees: string[];
    assignedDate: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
        publish: {
            href: string;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        folder: {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
    };
};
export declare const FACETED_CONTENT_ITEM: {
    schema: string;
    id: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
        };
    };
    version: number;
    label: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    deliveryId: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
        publish: {
            href: string;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        delete: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        localizations: {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        folder: {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
    };
};
export declare const CONTENT_ITEMS_FACET: {
    _embedded: {
        'content-items': {
            schema: string;
            id: string;
            folderId: string;
            body: {
                _meta: {
                    name: string;
                    schema: string;
                };
            };
            version: number;
            label: string;
            status: string;
            createdBy: string;
            createdDate: string;
            lastModifiedBy: string;
            lastModifiedDate: string;
            deliveryId: string;
            _links: {
                self: {
                    href: string;
                };
                'content-item': {
                    href: string;
                };
                publish: {
                    href: string;
                };
                planned: {
                    href: string;
                    templated: boolean;
                };
                update: {
                    href: string;
                };
                archive: {
                    href: string;
                };
                unarchive: {
                    href: string;
                };
                delete: {
                    href: string;
                };
                'restore-version': {
                    href: string;
                };
                'content-repository': {
                    href: string;
                };
                'content-item-version': {
                    href: string;
                    templated: boolean;
                };
                localizations: {
                    href: string;
                    templated: boolean;
                };
                'content-item-versions': {
                    href: string;
                    templated: boolean;
                };
                'content-item-history': {
                    href: string;
                    templated: boolean;
                };
                copy: {
                    href: string;
                    templated: boolean;
                };
                folder: {
                    href: string;
                };
                'content-item-with-children': {
                    href: string;
                };
                'set-locale': {
                    href: string;
                };
                'edit-workflow': {
                    href: string;
                };
            };
        }[];
    };
    _links: {
        first: {
            href: string;
        };
        last: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    page: {
        size: number;
        totalElements: number;
        totalPages: number;
        number: number;
    };
    _facets: {
        schema: {
            _id: string;
            count: number;
        }[];
        'lastModifiedDate:Last 7 days': any[];
        root: {
            _id: string;
            count: number;
        }[];
        'lastModifiedDate:Last 60 days': any[];
        publishingStatus: any[];
        assignees: {
            _id: string;
            count: number;
        }[];
        'lastModifiedDate:Last 30 days': any[];
        'workflow.state': any[];
        'lastModifiedDate:Last 14 days': any[];
        locale: any[];
        'lastModifiedDate:Over 60 days': any[];
    };
};
/**
 * @hidden
 */
export declare const CONTENT_TYPE_SCHEMA: {
    validationLevel: string;
    body: string;
    schemaId: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    version: number;
    id: string;
    status: string;
    _links: {
        self: {
            href: string;
        };
        'content-type-schema': {
            href: string;
        };
        hub: {
            href: string;
        };
        history: {
            href: string;
        };
        getByVersion: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        restore: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_TYPE_SCHEMA_V2: {
    validationLevel: string;
    body: string;
    schemaId: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    version: number;
    id: string;
    status: string;
    _links: {
        self: {
            href: string;
        };
        'content-type-schema': {
            href: string;
        };
        hub: {
            href: string;
        };
        history: {
            href: string;
        };
        getByVersion: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        restore: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_REPOSITORY: {
    id: string;
    name: string;
    label: string;
    status: string;
    features: any[];
    type: string;
    contentTypes: any[];
    itemLocales: string[];
    _links: {
        self: {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        hub: {
            href: string;
        };
        'create-content-item': {
            href: string;
        };
        'search-content-items': {
            href: string;
            templated: boolean;
        };
        'content-items': {
            href: string;
            templated: boolean;
        };
        share: {
            href: string;
        };
        'assign-content-type': {
            href: string;
        };
        'unassign-content-type': {
            href: string;
            templated: boolean;
        };
        folders: {
            href: string;
            templated: boolean;
        };
        'create-folder': {
            href: string;
        };
        features: {
            href: string;
            templated: boolean;
        };
        'update-content-items': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_REPOSITORY_SLOTS: {
    id: string;
    name: string;
    label: string;
    status: string;
    features: string[];
    type: string;
    contentTypes: any[];
    itemLocales: string[];
    _links: {
        self: {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        hub: {
            href: string;
        };
        'create-content-item': {
            href: string;
        };
        'search-content-items': {
            href: string;
            templated: boolean;
        };
        'content-items': {
            href: string;
            templated: boolean;
        };
        share: {
            href: string;
        };
        'assign-content-type': {
            href: string;
        };
        'unassign-content-type': {
            href: string;
            templated: boolean;
        };
        folders: {
            href: string;
            templated: boolean;
        };
        'create-folder': {
            href: string;
        };
        features: {
            href: string;
            templated: boolean;
        };
        'update-content-items': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const EVENT: {
    id: string;
    name: string;
    comment: string;
    start: string;
    end: string;
    brief: string;
    _links: {
        self: {
            href: string;
        };
        event: {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        archive: {
            href: string;
        };
        hub: {
            href: string;
        };
        editions: {
            href: string;
            templated: boolean;
        };
        'create-edition': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EVENT_V2: {
    id: string;
    name: string;
    comment: string;
    start: string;
    end: string;
    brief: string;
    _links: {
        self: {
            href: string;
        };
        event: {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        archive: {
            href: string;
        };
        hub: {
            href: string;
        };
        editions: {
            href: string;
            templated: boolean;
        };
        'create-edition': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EDITION: {
    id: string;
    name: string;
    comment: string;
    start: string;
    end: string;
    eventId: string;
    publishingStatus: string;
    slotsRemaining: number;
    schedulingErrors: any;
    activeEndDate: boolean;
    publishingJobId: any;
    statusUpdated: string;
    schedulingUser: any;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    stagedDate: any;
    _links: {
        self: {
            href: string;
        };
        edition: {
            href: string;
        };
        'create-preview': {
            href: string;
        };
        preview: {
            href: string;
        };
        schedule: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        archive: {
            href: string;
        };
        slots: {
            href: string;
        };
        'list-slots': {
            href: string;
            templated: boolean;
        };
        event: {
            href: string;
        };
        'edition-conflicts': {
            href: string;
        };
        'edition-conflict': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EDITION_V2: {
    id: string;
    name: string;
    comment: string;
    start: string;
    end: string;
    eventId: string;
    publishingStatus: string;
    slotsRemaining: number;
    schedulingErrors: any;
    activeEndDate: boolean;
    publishingJobId: any;
    statusUpdated: string;
    schedulingUser: any;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    stagedDate: any;
    _links: {
        self: {
            href: string;
        };
        edition: {
            href: string;
        };
        'create-preview': {
            href: string;
        };
        preview: {
            href: string;
        };
        schedule: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        archive: {
            href: string;
        };
        slots: {
            href: string;
        };
        'list-slots': {
            href: string;
            templated: boolean;
        };
        event: {
            href: string;
        };
        'edition-conflicts': {
            href: string;
        };
        'edition-conflict': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EDITION_SCHEDULE_ERROR: {
    errors: ({
        level: string;
        code: string;
        message: string;
        overlaps: {
            editionId: string;
            name: string;
            start: string;
        }[];
    } | {
        level: string;
        code: string;
        message: string;
        overlaps?: undefined;
    })[];
    _links: {};
};
/**
 * @hidden
 */
export declare const EDITION_CONFLICT: {
    id: string;
    name: string;
    comment: string;
    start: string;
    end: string;
    eventId: string;
    publishingStatus: string;
    slotsRemaining: number;
    schedulingErrors: any;
    activeEndDate: boolean;
    publishingJobId: any;
    statusUpdated: string;
    schedulingUser: any;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    stagedDate: any;
    _links: {
        self: {
            href: string;
        };
        edition: {
            href: string;
        };
        'create-preview': {
            href: string;
        };
        preview: {
            href: string;
        };
        schedule: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        archive: {
            href: string;
        };
        slots: {
            href: string;
        };
        'list-slots': {
            href: string;
            templated: boolean;
        };
        event: {
            href: string;
        };
        'edition-conflicts': {
            href: string;
        };
        'edition-conflict': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EDITION_SLOT: {
    eventId: string;
    editionId: string;
    createdDate: string;
    content: {
        body: {
            _meta: {
                schema: string;
                name: string;
            };
        };
        updated: string;
    };
    status: string;
    contentTypeId: string;
    slotId: string;
    slotLabel: string;
    conflicts: boolean;
    empty: boolean;
    _links: {
        self: {
            href: string;
        };
        'edition-slot': {
            href: string;
        };
        edition: {
            href: string;
        };
        slot: {
            href: string;
        };
        content: {
            href: string;
        };
        'safe-update-content': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EDITION_SLOT_V2: {
    eventId: string;
    editionId: string;
    createdDate: string;
    content: {
        body: {
            _meta: {
                schema: string;
                name: string;
            };
        };
        updated: string;
    };
    status: string;
    contentTypeId: string;
    slotId: string;
    slotLabel: string;
    conflicts: boolean;
    empty: boolean;
    _links: {
        self: {
            href: string;
        };
        'edition-slot': {
            href: string;
        };
        edition: {
            href: string;
        };
        slot: {
            href: string;
        };
        content: {
            href: string;
        };
        'safe-update-content': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const EXTENSION: {
    id: string;
    hubId: string;
    name: string;
    label: string;
    description: string;
    url: string;
    height: number;
    category: string;
    parameters: string;
    snippets: {
        label: string;
        body: string;
    }[];
    settings: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        extension: {
            href: string;
        };
        hub: {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SNAPSHOT: {
    id: string;
    comment: string;
    createdDate: string;
    createdBy: string;
    type: string;
    meta: any[];
    taggedEditions: any[];
    rootContentItem: {
        label: string;
        contentTypeUri: string;
    };
    _links: {
        self: {
            href: string;
        };
        snapshot: {
            href: string;
        };
        'publishing-jobs': {
            href: string;
            templated: boolean;
        };
        'create-publishing-job': {
            href: string;
        };
        'edition-links': {
            href: string;
        };
        hub: {
            href: string;
        };
        'content-root': {
            href: string;
        };
        'snapshot-content-item': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const SNAPSHOT_RESULTS: {
    hubId: string;
    snapshots: {
        id: string;
        comment: string;
        createdDate: string;
        createdBy: string;
        type: string;
        meta: any[];
        taggedEditions: any[];
        rootContentItem: {
            label: string;
            contentTypeUri: string;
        };
        _links: {
            self: {
                href: string;
            };
            snapshot: {
                href: string;
            };
            'publishing-jobs': {
                href: string;
                templated: boolean;
            };
            'create-publishing-job': {
                href: string;
            };
            'edition-links': {
                href: string;
            };
            hub: {
                href: string;
            };
            'content-root': {
                href: string;
            };
            'snapshot-content-item': {
                href: string;
                templated: boolean;
            };
        };
    }[];
    _links: {};
};
/**
 * @hidden
 */
export declare const LOCALIZATION_JOB: {
    status: string;
    rootContentItem: {
        label: string;
        locale: string;
        id: string;
    };
    requestedLocales: string[];
    createdBy: string;
    createdDate: string;
    _links: {
        'content-root': {
            href: string;
        };
        findByRootContentItem: {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const FOLDER: {
    id: string;
    name: string;
    _links: {
        self: {
            href: string;
        };
        folder: {
            href: string;
        };
        folders: {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-items': {
            href: string;
        };
        'create-folder': {
            href: string;
        };
        'delete-folder': {
            href: string;
        };
        'update-folder': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const NEW_FOLDER: {
    id: string;
    name: string;
    _links: {
        self: {
            href: string;
        };
        folder: {
            href: string;
        };
        folders: {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-items': {
            href: string;
        };
        'create-folder': {
            href: string;
        };
        'delete-folder': {
            href: string;
        };
        'update-folder': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX: {
    id: string;
    replicaCount: number;
    name: string;
    suffix: string;
    label: string;
    type: string;
    createdDate: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        index: {
            href: string;
            templated: boolean;
        };
        'hub-search-key': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        'list-replicas': {
            href: string;
            templated: boolean;
        };
        hub: {
            href: string;
        };
        settings: {
            href: string;
        };
        'update-settings': {
            href: string;
            templated: boolean;
        };
        'assigned-content-types': {
            href: string;
        };
        'create-assigned-content-types': {
            href: string;
        };
        clear: {
            href: string;
        };
        stats: {
            href: string;
            templated: boolean;
        };
        'top-searches': {
            href: string;
            templated: boolean;
        };
        'top-hits': {
            href: string;
            templated: boolean;
        };
        'searches-with-no-results': {
            href: string;
            templated: boolean;
        };
        'top-filters-no-result-search': {
            href: string;
            templated: boolean;
        };
        'users-count': {
            href: string;
            templated: boolean;
        };
        'searches-count': {
            href: string;
            templated: boolean;
        };
        'no-results-rate': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_UPDATED: {
    label: string;
    id: string;
    replicaCount: number;
    name: string;
    suffix: string;
    type: string;
    createdDate: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        index: {
            href: string;
            templated: boolean;
        };
        'hub-search-key': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        'list-replicas': {
            href: string;
            templated: boolean;
        };
        hub: {
            href: string;
        };
        settings: {
            href: string;
        };
        'update-settings': {
            href: string;
            templated: boolean;
        };
        'assigned-content-types': {
            href: string;
        };
        'create-assigned-content-types': {
            href: string;
        };
        clear: {
            href: string;
        };
        stats: {
            href: string;
            templated: boolean;
        };
        'top-searches': {
            href: string;
            templated: boolean;
        };
        'top-hits': {
            href: string;
            templated: boolean;
        };
        'searches-with-no-results': {
            href: string;
            templated: boolean;
        };
        'top-filters-no-result-search': {
            href: string;
            templated: boolean;
        };
        'users-count': {
            href: string;
            templated: boolean;
        };
        'searches-count': {
            href: string;
            templated: boolean;
        };
        'no-results-rate': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_REPLICA: {
    id: string;
    parentId: string;
    label: string;
    replicaCount: number;
    name: string;
    suffix: string;
    type: string;
    createdDate: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        index: {
            href: string;
            templated: boolean;
        };
        'hub-search-key': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
        'list-replicas': {
            href: string;
            templated: boolean;
        };
        hub: {
            href: string;
        };
        settings: {
            href: string;
        };
        'update-settings': {
            href: string;
            templated: boolean;
        };
        'assigned-content-types': {
            href: string;
        };
        'create-assigned-content-types': {
            href: string;
        };
        clear: {
            href: string;
        };
        stats: {
            href: string;
            templated: boolean;
        };
        'top-searches': {
            href: string;
            templated: boolean;
        };
        'top-hits': {
            href: string;
            templated: boolean;
        };
        'searches-with-no-results': {
            href: string;
            templated: boolean;
        };
        'top-filters-no-result-search': {
            href: string;
            templated: boolean;
        };
        'users-count': {
            href: string;
            templated: boolean;
        };
        'searches-count': {
            href: string;
            templated: boolean;
        };
        'no-results-rate': {
            href: string;
            templated: boolean;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_SETTINGS: {
    replicas: string[];
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        settings: {
            href: string;
            templated: boolean;
        };
        index: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_TOP_SEARCHES: {
    search: string;
    count: number;
    nbHits: number;
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_TOP_HITS: {
    hit: string;
    count: number;
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_SEARCHES_WITH_NO_RESULTS: {
    search: string;
    count: number;
    withFilterCount: number;
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_TOP_FILTER_NO_RESULT_SEARCH: {
    count: number;
    values: {
        attribute: string;
        operator: string;
        value: string;
    }[];
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_USERS_COUNT: {
    count: number;
    dates: {
        count: number;
        date: string;
    }[];
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        'users-count': {
            href: string;
            templated: boolean;
        };
        index: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_SEARCHES_COUNT: {
    count: number;
    dates: {
        count: number;
        date: string;
    }[];
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        'searches-count': {
            href: string;
            templated: boolean;
        };
        index: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_NO_RESULTS_RATE: {
    rate: number;
    count: number;
    noResultRate: number;
    dates: {
        rate: number;
        count: number;
        noResultRate: number;
        date: string;
    }[];
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        'no-results-rate': {
            href: string;
            templated: boolean;
        };
        index: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_SETTINGS_UPDATED: {
    hitsPerPage: number;
    replicas: string[];
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        settings: {
            href: string;
            templated: boolean;
        };
        index: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_STATISTICS: {
    totalRecords: number;
    totalRecordSize: number;
    averageRecordSize: number;
    usage: {
        averageResponseTime: {
            unit: string;
            duration: number;
            value: number;
        };
        numberOfSearches: {
            unit: string;
            duration: number;
            value: number;
        };
    };
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        stats: {
            href: string;
            templated: boolean;
        };
        index: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const ASSIGNED_CONTENT_TYPE: {
    id: string;
    contentTypeUri: string;
    createdDate: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        'assigned-content-type': {
            href: string;
            templated: boolean;
        };
        'content-type': {
            href: string;
        };
        unassign: {
            href: string;
        };
        webhook: {
            href: string;
        };
        'recreate-webhook': {
            href: string;
        };
        'active-content-webhook': {
            href: string;
        };
        'archived-content-webhook': {
            href: string;
        };
        'recreate-active-content-webhook': {
            href: string;
        };
        'recreate-archived-content-webhook': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const SEARCH_INDEX_API_KEY: {
    id: string;
    type: string;
    key: string;
    applicationId: string;
    _links: {
        self: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const WEBHOOK: {
    id: string;
    label: string;
    events: string[];
    active: boolean;
    handlers: string[];
    notifications: any[];
    secret: string;
    createdDate: string;
    lastModifiedDate: string;
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        requests: {
            href: string;
            templated: boolean;
        };
        'event-types': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
    };
};
export declare const WEBHOOK_WITH_EXTRAS: {
    id: string;
    label: string;
    events: string[];
    active: boolean;
    handlers: string[];
    notifications: any[];
    secret: string;
    createdDate: string;
    lastModifiedDate: string;
    headers: ({
        key: string;
        value: any;
        secret: boolean;
    } | {
        key: string;
        value: string;
        secret: any;
    })[];
    filters: ({
        type: string;
        arguments: ({
            jsonPath: string;
            value?: undefined;
        } | {
            value: string;
            jsonPath?: undefined;
        })[];
    } | {
        type: string;
        arguments: ({
            jsonPath: string;
            value?: undefined;
        } | {
            value: string[];
            jsonPath?: undefined;
        })[];
    })[];
    customPayload: {
        type: string;
        value: string;
    };
    method: string;
    _links: {
        self: {
            href: string;
        };
        hub: {
            href: string;
        };
        requests: {
            href: string;
            templated: boolean;
        };
        'event-types': {
            href: string;
        };
        update: {
            href: string;
        };
        delete: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const WORKFLOW_STATE: {
    id: string;
    label: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    color: string;
    _links: {
        self: {
            href: string;
        };
        'workflow-state': {
            href: string;
        };
        hub: {
            href: string;
        };
        update: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const WORKFLOW_STATE_UPDATED: {
    label: string;
    id: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    color: string;
    _links: {
        self: {
            href: string;
        };
        'workflow-state': {
            href: string;
        };
        hub: {
            href: string;
        };
        update: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_ITEM_WITH_WORKFLOW_STATE: {
    workflow: {
        state: string;
    };
    id: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
        };
    };
    version: number;
    label: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    deliveryId: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
        publish: {
            href: string;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        delete: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        localizations: {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        folder: {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_TYPE: {
    id: string;
    contentTypeUri: string;
    status: string;
    settings: {
        label: string;
        icons: {
            size: number;
            url: string;
        }[];
        visualizations: {
            label: string;
            templatedUri: string;
            default: boolean;
        }[];
    };
    _links: {
        self: {
            href: string;
        };
        update: {
            href: string;
        };
        archive: {
            href: string;
        };
        unarchive: {
            href: string;
        };
        'content-type': {
            href: string;
        };
        'effective-content-type': {
            href: string;
        };
        'content-type-schema': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const CONTENT_TYPE_CACHED_SCHEMA: {
    hubId: string;
    contentTypeUri: string;
    cachedSchema: {
        $schema: string;
        id: string;
        title: string;
        description: string;
        allOf: {
            $ref: string;
        }[];
        type: string;
        properties: {
            inlineExample: {
                type: string;
                title: string;
                properties: {
                    field1: {
                        type: string;
                        title: string;
                    };
                };
                required: string[];
            };
            internalRefExample: {
                $ref: string;
            };
            externalRefExample: {
                $ref: string;
            };
            arrayExample: {
                type: string;
                title: string;
                items: {
                    $ref: string;
                };
            };
        };
        definitions: {
            mapEntry: {
                type: string;
                title: string;
                properties: {
                    key: {
                        type: string;
                        title: string;
                    };
                    value: {
                        type: string;
                        title: string;
                    };
                };
                required: string[];
            };
        };
    };
    _links: {
        self: {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const HIERARCHY_CONTENT_ITEM: {
    id: string;
    contentRepositoryId: string;
    folderId: string;
    body: {
        _meta: {
            name: string;
            schema: string;
            hierarchy: {
                parentId: string;
                root: boolean;
            };
        };
        string: string;
    };
    version: number;
    label: string;
    status: string;
    createdBy: string;
    createdDate: string;
    lastModifiedBy: string;
    lastModifiedDate: string;
    hierarchy: {
        parentId: string;
        root: boolean;
    };
    deliveryId: string;
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
            templated: boolean;
        };
        planned: {
            href: string;
            templated: boolean;
        };
        publish: {
            href: string;
        };
        update: {
            href: string;
        };
        'restore-version': {
            href: string;
        };
        'content-repository': {
            href: string;
        };
        'content-item-version': {
            href: string;
            templated: boolean;
        };
        'content-item-versions': {
            href: string;
            templated: boolean;
        };
        'content-item-history': {
            href: string;
            templated: boolean;
        };
        copy: {
            href: string;
            templated: boolean;
        };
        unarchive: {
            href: string;
        };
        archive: {
            href: string;
        };
        folder: {
            href: string;
        };
        'set-locale': {
            href: string;
        };
        'create-localizations': {
            href: string;
        };
        localizations: {
            href: string;
            templated: boolean;
        };
        'localization-jobs': {
            href: string;
            templated: boolean;
        };
        'edition-slot-associations': {
            href: string;
        };
        'edit-workflow': {
            href: string;
        };
        'content-item-with-children': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const HIERARCHY_NODE_FIRST_CHILD: {
    id: string;
    contentTypeUri: string;
    label: string;
    publishingStatus: string;
    root: boolean;
    parentId: string;
    hasChildren: boolean;
    repositoryId: string;
    _links: {
        'content-item': {
            href: string;
        };
        archive: {
            href: string;
        };
        'get-hierarchy-parents': {
            href: string;
        };
        'get-hierarchy-children': {
            href: string;
        };
    };
};
export declare const HIERARCHY_NODE: {
    id: string;
    contentTypeUri: string;
    label: string;
    publishingStatus: string;
    root: boolean;
    hasChildren: boolean;
    repositoryId: string;
    _links: {
        'content-item': {
            href: string;
        };
        archive: {
            href: string;
        };
        'get-hierarchy-parents': {
            href: string;
        };
        'get-hierarchy-children': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const HIERARCHY_CHILDREN: {
    id: string;
    contentTypeUri: string;
    label: string;
    publishingStatus: string;
    root: boolean;
    hasChildren: boolean;
    repositoryId: string;
    children: {
        id: string;
        contentTypeUri: string;
        label: string;
        publishingStatus: string;
        root: boolean;
        parentId: string;
        hasChildren: boolean;
        repositoryId: string;
        _links: {
            'content-item': {
                href: string;
            };
            archive: {
                href: string;
            };
            'get-hierarchy-parents': {
                href: string;
            };
            'get-hierarchy-children': {
                href: string;
            };
        };
    }[];
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare const HIERARCHY_PARENTS: {
    id: string;
    contentTypeUri: string;
    label: string;
    publishingStatus: string;
    root: boolean;
    parentId: string;
    hasChildren: boolean;
    repositoryId: string;
    parents: ({
        id: string;
        contentTypeUri: string;
        label: string;
        publishingStatus: string;
        root: boolean;
        hasChildren: boolean;
        repositoryId: string;
        _links: {
            'content-item': {
                href: string;
            };
            archive: {
                href: string;
            };
            'get-hierarchy-parents': {
                href: string;
            };
            'get-hierarchy-children': {
                href: string;
            };
        };
        parentId?: undefined;
    } | {
        id: string;
        contentTypeUri: string;
        label: string;
        publishingStatus: string;
        root: boolean;
        parentId: string;
        hasChildren: boolean;
        repositoryId: string;
        _links: {
            'content-item': {
                href: string;
            };
            archive: {
                href: string;
            };
            'get-hierarchy-parents': {
                href: string;
            };
            'get-hierarchy-children': {
                href: string;
            };
        };
    })[];
    _links: {
        self: {
            href: string;
        };
        'content-item': {
            href: string;
        };
    };
};
/**
 * @hidden
 */
export declare class DynamicContentFixtures {
    static install(mock: MockAdapter): void;
}
/**
 * @hidden
 */
import MockAdapter from 'axios-mock-adapter';
/**
 * @hidden
 */
export declare class MockDynamicContent extends DynamicContent {
    mock: MockAdapter;
    constructor(clientCredentials?: OAuth2ClientCredentials, dcConfig?: DynamicContentConfig, httpClient?: AxiosRequestConfig);
    protected createTokenClient(dcConfig: DynamicContentConfig, clientCredentials: OAuth2ClientCredentials, httpClient: HttpClient): AccessTokenProvider;
    protected createResourceClient(dcConfig: DynamicContentConfig, tokenProvider: AccessTokenProvider, httpClient: HttpClient): HalClient;
}
